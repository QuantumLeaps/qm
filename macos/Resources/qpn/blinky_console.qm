<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.0" links="0">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, macOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP-nano framework installed on your computer and the GNU-GCC compiler, which you can get by installing the QP-bundle from:

https://www.state-machine.com/#Downloads

NOTE: QP-nano has been discontinued and is NOT present in the newer releases of QP-bundle.


Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP-nano see:
https://www.state-machine.com/qpn/exa.html</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpn::QActive">
   <statechart properties="0x01">
    <initial target="../1">
     <action>/* arm the private time event for tick rate 0
* to expire in 1/2s and periodically every 1/2 second
*/
QActive_armX(&amp;me-&gt;super,
             0U,
             BSP_TICKS_PER_SEC/2U,
             BSP_TICKS_PER_SEC/2U);</action>
     <initial_glyph conn="2,3,5,1,20,5,-4">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry>BSP_ledOff();</entry>
     <tran trig="Q_TIMEOUT" target="../../2">
      <tran_glyph conn="2,16,3,1,18,6,-2">
       <action box="0,-2,14,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,16,12">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry>BSP_ledOn();</entry>
     <tran trig="Q_TIMEOUT" target="../../1">
      <tran_glyph conn="2,30,3,1,20,-19,-4">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,20,16,12">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state_diagram size="26,34"/>
   </statechart>
  </class>
  <operation name="Blinky_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Blinky * const me = &amp;AO_Blinky;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));</code>
  </operation>
 </package>
 <directory name=".">
  <file name="blinky.c">
   <text>#include &quot;qpn.h&quot;    /* QP-nano framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

/* ask QM to declare the Blinky class --------------------------------------*/
$declare${AOs::Blinky}

/* the single instance of the Blinky active object -------------------------*/
Blinky AO_Blinky;

/* ask QM to define the Blinky class ---------------------------------------*/
$define${AOs::Blinky_ctor}
$define${AOs::Blinky}</text>
  </file>
  <file name="bsp.h">
   <text>#ifndef BSP_H
#define BSP_H

/* a very simple Board Support Package (BSP) -------------------------------*/
enum { BSP_TICKS_PER_SEC = 100 }; /* number of clock ticks in a second */
void BSP_init(void);
void BSP_ledOff(void);
void BSP_ledOn(void);

/* define the event signals used in the application ------------------------*/
enum BlinkySignals {
    DUMMY_SIG = Q_USER_SIG,
    MAX_SIG /* the last signal */
};

/* active object(s) used in this application -------------------------------*/
extern struct Blinky AO_Blinky; /* opaque struct */
$declare${AOs::Blinky_ctor}

#endif /* BSP_H */</text>
  </file>
  <file name="bsp.c">
   <text>/* Board Support Package implementation for desktop OS (Windows, Linux, MacOS) */
#include &quot;qpn.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */
#include &lt;stdio.h&gt;  /* for printf()/fprintf() */
#include &lt;stdlib.h&gt; /* for exit() */

void BSP_init(void)   {
    printf(&quot;Simple Blinky example\n&quot;
           &quot;QP-nano version: %s\n&quot;
           &quot;Press Ctrl-C to quit...\n&quot;,
           QP_VERSION_STR);
}
void BSP_ledOff(void) { printf(&quot;LED OFF\n&quot;); }
void BSP_ledOn(void)  { printf(&quot;LED ON\n&quot;);  }

/* callback functions needed by the framework ------------------------------*/
void QF_onStartup(void) {}
void QF_onCleanup(void) {}
void QF_onClockTickISR(void) {
    QF_tickXISR(0U); /* QF-nano clock tick processing for rate 0 */
}
void Q_onAssert(char_t const Q_ROM * const module, int_t loc) {
    fprintf(stderr, &quot;Assertion failed in %s:%d&quot;, module, loc);
    exit(-1);
}</text>
  </file>
  <file name="main.c">
   <text>#include &quot;qpn.h&quot;    /* QP-nano framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

//Q_DEFINE_THIS_FILE

/* Local-scope objects -----------------------------------------------------*/
static QEvt l_blinkyQSto[10]; /* Event queue storage for Blinky */

/* QF_active[] array defines all active object control blocks --------------*/
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,           (QEvt *)0,        0U                      },
    { (QActive *)&amp;AO_Blinky,  l_blinkyQSto,     Q_DIM(l_blinkyQSto)     }
};

/* the main function -------------------------------------------------------*/
int main(void) {
    QF_init(Q_DIM(QF_active)); /* initialize the QF-nano framework */
    BSP_init(); /* initialize the Board Support Package */

    Blinky_ctor(); /* in C you must explicitly call the Blinky constructor */
    return QF_run(); /* transfer control to QF-nano */
}</text>
  </file>
  <file name="qpn_conf.h">
   <text>#ifndef qpn_conf_h
#define qpn_conf_h

#define Q_PARAM_SIZE            4
#define QF_MAX_TICK_RATE        1
#define QF_TIMEEVT_CTR_SIZE     2
#define QF_TIMEEVT_PERIODIC

#endif  /* qpn_conf_h */</text>
  </file>
  <file name="Makefile">
   <text># Makefile for building QP-nano application on Windows and POSIX hosts
#
# examples of invoking this Makefile:
# building configurations: Debug (default), Release, and Spy
# make
# make CONF=rel
#
# cleaning configurations: Debug (default), Release, and Spy
# make clean
# make CONF=rel clean
#
# NOTE:
# To use this Makefile on Windows, you will need the GNU make utility, which
# is included in the QTools collection for Windows, see:
#    http://sourceforge.net/projects/qpc/files/QTools/
#

#-----------------------------------------------------------------------------
# project name:
#
PROJECT := blinky

#-----------------------------------------------------------------------------
# project directories:
#

# list of all source directories used by this project
VPATH := . \

# list of all include directories needed by this project
INCLUDES := -I. \

# location of the QP-nano framework (if not provided in an env. variable)
ifeq ($(QPN),)
QPN := ../../..
endif

#-----------------------------------------------------------------------------
# project files:
#

# C source files...
C_SRCS := \
    blinky.c \
    bsp.c \
    main.c

# C++ source files...
CPP_SRCS :=

LIB_DIRS  :=
LIBS      :=

# defines...
DEFINES   :=

ifeq (,$(CONF))
    CONF := dbg
endif

#-----------------------------------------------------------------------------
# add QP-nano framework (depends on the OS this Makefile runs on):
#
ifeq ($(OS),Windows_NT)

QPN_PORT_DIR := $(QPN)/ports/win32-qv

C_SRCS += \
    qepn.c \
    qfn_win32.c

else

QPN_PORT_DIR := $(QPN)/ports/posix-qv

C_SRCS += \
    qepn.c \
    qfn_posix.c

LIBS += -lpthread

endif

#============================================================================
# Typically you should not need to change anything below this line

VPATH    += $(QPN)/src/qfn $(QPN_PORT_DIR)
INCLUDES += -I$(QPN)/include -I$(QPN)/src -I$(QPN_PORT_DIR)

#-----------------------------------------------------------------------------
# GNU toolset:
#
# NOTE:
# GNU toolset (MinGW) is included in the QTools collection for Windows, see:
#     http://sourceforge.net/projects/qpc/files/QTools/
# It is assumed that %QTOOLS%\bin directory is added to the PATH
#
CC    := gcc
CPP   := g++
LINK  := gcc    # for C programs
#LINK  := g++   # for C++ programs

#-----------------------------------------------------------------------------
# basic utilities (depends on the OS this Makefile runs on):
#
ifeq ($(OS),Windows_NT)
    MKDIR      := mkdir
    RM         := rm
    RMDIR      := rmdir
    TARGET_EXT := .exe
else ifeq ($(OSTYPE),cygwin)
    MKDIR      := mkdir -p
    RM         := rm -f
    RMDIR      := rmdir
    TARGET_EXT := .exe
else
    MKDIR      := mkdir -p
    RM         := rm -f
    RMDIR      := rmdir
    TARGET_EXT :=
endif

#-----------------------------------------------------------------------------
# build configurations...

ifeq (rel, $(CONF)) # Release configuration ..................................

BIN_DIR := build_rel
# gcc options:
CFLAGS  = -c -O3 -fno-pie -std=c99 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES) -DNDEBUG

CPPFLAGS = -c -O3 -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES) -DNDEBUG

else # default Debug configuration .........................................

BIN_DIR := build

# gcc options:
CFLAGS  = -c -g -O -fno-pie -std=c99 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES)

CPPFLAGS = -c -g -O -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES)

endif  # .....................................................................

LINKFLAGS :=

#-----------------------------------------------------------------------------
C_OBJS       := $(patsubst %.c,%.o,   $(C_SRCS))
CPP_OBJS     := $(patsubst %.cpp,%.o, $(CPP_SRCS))

TARGET_EXE   := $(BIN_DIR)/$(PROJECT)$(TARGET_EXT)
C_OBJS_EXT   := $(addprefix $(BIN_DIR)/, $(C_OBJS))
C_DEPS_EXT   := $(patsubst %.o,%.d, $(C_OBJS_EXT))
CPP_OBJS_EXT := $(addprefix $(BIN_DIR)/, $(CPP_OBJS))
CPP_DEPS_EXT := $(patsubst %.o,%.d, $(CPP_OBJS_EXT))

# create $(BIN_DIR) if it does not exist
ifeq (&quot;$(wildcard $(BIN_DIR))&quot;,&quot;&quot;)
$(shell $(MKDIR) $(BIN_DIR))
endif

#-----------------------------------------------------------------------------
# rules
#

all: $(TARGET_EXE)

$(TARGET_EXE) : $(C_OBJS_EXT) $(CPP_OBJS_EXT)
    $(LINK) $(LINKFLAGS) $(LIB_DIRS) -o $@ $^ $(LIBS)

$(BIN_DIR)/%.d : %.c
    $(CC) -MM -MT $(@:.d=.o) $(CFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.d : %.cpp
    $(CPP) -MM -MT $(@:.d=.o) $(CPPFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.o : %.c
    $(CC) $(CFLAGS) $&lt; -o $@

$(BIN_DIR)/%.o : %.cpp
    $(CPP) $(CPPFLAGS) $&lt; -o $@

$(BIN_DIR)/%.o : %.rc
    $(RC) $(RCINCLUDES) -i $&lt; -o $@

# include dependency files only if our goal depends on their existence
ifneq ($(MAKECMDGOALS),clean)
  ifneq ($(MAKECMDGOALS),show)
-include $(C_DEPS_EXT) $(CPP_DEPS_EXT)
  endif
endif

.PHONY : clean show

clean :
    $(RM) $(BIN_DIR)/*.*
    $(RMDIR) $(BIN_DIR)

show :
    @echo PROJECT      = $(PROJECT)
    @echo TARGET_EXE   = $(TARGET_EXE)
    @echo VPATH        = $(VPATH)
    @echo C_SRCS       = $(C_SRCS)
    @echo CPP_SRCS     = $(CPP_SRCS)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo C_OBJS_EXT   = $(C_OBJS_EXT)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo CPP_DEPS_EXT = $(CPP_DEPS_EXT)
    @echo CPP_OBJS_EXT = $(CPP_OBJS_EXT)
    @echo LIB_DIRS     = $(LIB_DIRS)
    @echo LIBS         = $(LIBS)
    @echo DEFINES      = $(DEFINES)
</text>
  </file>
 </directory>
</model>

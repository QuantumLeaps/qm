/*! @page history Revision History
@nav{ce_qmc,license}

@section qm_5_1_3 Version 5.1.3, 2021-06-17

__Corrections in Property Sheets:__

This release corrects the property sheets for attributes (both class and free attributes), to remove "pseudocode" fields for "initializer". Similarly, the property sheets for operations have been corrected to remove the "pseudocode" for "operation".

__Code Generation:__

Additionally, this release adds code generation for "initializer" of **static** class attributes.

__Preparation for Qt 6:__

The internal code structure has been scrutinized for future migration to the new Qt6. Specifically some deprecated APIs have been replaced with the new, recommended versions.


@section qm_5_1_1 Version 5.1.1, 2021-04-12

__More Complete Documentation:__

This release adds missing sections in the online and offline QM documentation. Specifically, the new sections in "Basic Modeling" include: "Class Operations", "Free Operations", "Explicit Constructor in C++", and "Working with Events".

__Improved Icons:__

Some icons have been improved to look better, especially with the "Dark Theme".

@section qm_5_1_0 Version 5.1.0, 2020-11-01

__Improved Out-of-Box Experience:__

This release improves the "out-of-box experience" for first-time QM users by openining the @ref ui_new-dlg "New Mosdel Dialog Box" when there are no "Recent Models" in the @ref ui_menu_file "File Menu". This allows the first-time users to immediately create and work with a QM model based on the provided examples. The provided examples have been improved and now come with @ref ui_session_file "session files", so that a chosen QM model opens up immediately showing the diagrams and files. Also, the @ref ui_tools-dlg "Manage Tools Dialog Box" is populated, so that the generated code from the models can be immediately built directly from QM.

__Implemented Feature Requests:__

- [feature#183 "Add documentation section in the property sheet for top-most initial transtion"](https://sourceforge.net/p/qpc/feature-requests/183/)

@note
This feature request slightly changes the QM model file format by adding new `<documentation>` element for statecharts. Therefore the QM minor-version number needed to be incremented so that older versions of QM will reject the newer models (because older QM versions might not be able to parse the new models.)

__Additional Enhancements:__

Additionally, this release improves the vertical layout of property sheets with the collapsible "documentation" section. Also, some problems in registeing and changing @ref ui_license-dlg "code-generation licenses" have been fixed.


@section qm_5_0_4 Version 5.0.4, 2020-09-10

This release adds back the @ref ce_qmc "QMC model compiler", for generating code from QM models in automated "headless" builds on servers without GUI libraries.

Additionally, this release adds class-prefix to the [auto-generated dictionaries](https://www.state-machine.com/qm/sm_statechart.html#sm_statechart-QS) for @ref sm_smstate "submachine states" in QP/C++. This prefix was already added for regular states in @ref qm_5_0_3 "QM 5.0.3", but the submachines states were not included in the change. Now, all auto-generated dictionaries should be consistent in having the class prefix.

Finally, this release on Windows switches to the newer Qt version 5.15.1 (LTS). (The QM releases on Linux and MacOS continue to use Qt 5.6.2.)


__Fixed Bugs:__
- [bug#281 "Scrollbars in QM disappear"](https://sourceforge.net/p/qpc/bugs/281/)


@section qm_5_0_3 Version 5.0.3, 2020-08-14

This release changes the [auto-generated dictionaries](https://www.state-machine.com/qm/sm_statechart.html#sm_statechart-QS) in QP/C++. Specifically, the function dictionaries for state handlers in C++ now contain the class-name prefix (e.g., `Philo::thinking`). This is to make the states unique within the application, which in turn helps in creating monitoring solutions with [QView](https://www.state-machine.com/qtools/qview.html).

__Fixed Bugs:__
- [bug#275 "Export diagram not working Ubuntu 20.04 QM 5.0.2"](https://sourceforge.net/p/qpc/bugs/278/)


@section qm_5_0_2 Version 5.0.2, 2020-07-17

__Fixed bugs:__
- [bug#275 "QM 5.0.1 trailing spaces in generated comments in C++"](https://sourceforge.net/p/qpc/bugs/275/)
- [bug#274 "QM 5.0.1 assertion failed in propshhet:366"](https://sourceforge.net/p/qpc/bugs/274/)


@section qm_5_0_1 Version 5.0.1, 2020-04-22

__Fixed Bugs:__

- [bug#265 "QM External File generation bug"](https://sourceforge.net/p/qpc/bugs/265/)

__Implemented Feature Requests:__
- [feature#175 "Class Attribute Initializer"](https://sourceforge.net/p/qpc/feature-requests/175/)


@section qm_5_0_0 Version 5.0.0, 2020-03-31

The main purpose of this release is to improve the support for high-resolution and high-DPI displays, such as 4K monitors. Specifically, this QM release brings a new, modern set of high-resolution icons.

__Fixed Bugs:__

- [bug#257 QM Code Editor has unused space on > 1080p resolution monitors](https://sourceforge.net/p/qpc/bugs/257/)

Additionally, this release improves support for the modern C++ (C++11 and newer standards). Here, specifically, the operation property sheet now provides an additional field called "specifiers", which allows the modeler to add C++ function specifiers, such as: `override`, `noexcept`, `const`, `=delete`, `=0`, etc. The C++ code generator has also been updated such that declaration-only specifiers are removed in the definition of the C++ operation.

@note
At the same time as the "specifiers" field has been added to the operation property sheet, the check boxes for "const" and "abstract" have been removed. This is because both these properties can be now provided in the "specifiers" field as `const` and `=0`, respectively. (This is supported even in C for qpc and qpn frameworks, although only the `const` specifier has implications for code gradation in C.)


@section qm_4_6_0 Version 4.6.0, 2019-12-30

__Fixed Bugs:__

- [bug#251 "Assertion failed in QM version 4.5.1, module connglyph"](https://sourceforge.net/p/qpc/bugs/251/)
- [bug#253 "Model-links comments in generated code sometimes don't work"](https://sourceforge.net/p/qpc/bugs/253/)

__Implemented Feature Requests:__

- [feature#170 "Model-link comments that don't cause 'dead code' PRQA warnings"](https://sourceforge.net/p/qpc/feature-requests/170/) Added "no dead code" character ('.') to generated comments (e.g., //.${...})
- [feature#171 "A way to provide 'explicit' specifier for C++ class constructor and operators"](https://sourceforge.net/p/qpc/feature-requests/171/). This is now accomplished by specifying 'explicit' in the return field in the constructor's property sheet.
- [feature#172 "Generate top-level file comment without '//' to comply with MISRA 2012 Rule 3.1"](https://sourceforge.net/p/qpc/feature-requests/172/)

Removed EMF (Enhanced Windows Metafile) diagram export in QM for Windows. This feature is superceded by SVG diagram export, which works on all platforms.
Removed "copy diagram to clipboard" command.


@section qm_4_5_1 Version 4.5.1, 2019-05-06

__Fixed Bugs:__

- [bug#239 Assertion failed in QM version 4.3.1, module statediagramscene:486
](https://sourceforge.net/p/qpc/bugs/239/)
- [bug#240 Assertion failed in QM version 4.5.0, module statediagramscene:442](https://sourceforge.net/p/qpc/bugs/240/)


@section qm_4_5_0 Version 4.5.0, 2019-03-30
This QM release matches the new [<b>state machine implementation style in QP/C++</b>](https://www.state-machine.com/qpcpp/sm.html). Specifically, the models based on QP/C++ now can choose to generate code with the **no me-> pointer** style, where state-handler functions are true *member* functions of the state machine class. Because of this, they can conveniently and naturally access all members of their class via the implicit `this` pointer, and without the need to use the "me->" pointer.

The new feature is available for both @ref sm_class_qhsm "QHsm-style" and @ref sm_class_qmsm "QMsm-style" implementation strategies and is selectable via the @ref sm_statechart_prop "Statechart Property Sheet":

![](sm_use-me.png)

@n
@attention
This QM release 4.5.0 requires QP/C/C++/nano version 6.5.0 or newer. This is because QM 4.5.0 assumes the "no me-> pointer" state machine implementation style support from the QP frameworks.


@section qm_4_4_0 Version 4.4.0, 2019-02-22

__Fixed Bugs:__

- [bugs#233 Generated Source Files marked as external duplicates the QP version check
](https://sourceforge.net/p/qpc/bugs/233/)


__Implemented Feature Requests:__

- [feature#161 Easier way to show state diagram from Model Explorer](https://sourceforge.net/p/qpc/feature-requests/161/)
- Added @ref bm_diagram_export "SVG diagram export" (Scalale Vector Graphics format)
- Added @ref ui_custom_style "Dark Style" to the UI
- Improved consistency of custom styling via the @ref ui_custom_qss "QM Style Sheet"
- Added @ref ui_custom properties to @ref ui_custom_code "Code-Edit Section" of the QM style sheet to customize syntax highlighers
- Improved Python syntax highlighting by styling the QUTest script commands.


@section qm_4_3_1 Version 4.3.1, 2018-09-10

__Fixed bugs:__

- [bug#221 QM 4.3/Linux - Permissions of generated (external) files](https://sourceforge.net/p/qpc/bugs/221/)

- [bug#222 Compilation error in QM generated code for QP/C++ in Spy configuration](https://sourceforge.net/p/qpc/bugs/222/)


Added support for Python files in QM (recognized file type with syntax coloring).


@section qm_4_3_0 Version 4.3.0, 2018-06-24
This release introduces several improvements to code generation.

__Implemented Feature Requests:__

- [feature#141 Support default function parameters for QM/qpcpp](https://sourceforge.net/p/qpc/feature-requests/142/)

- [feature#142 Allow initialization of free attributes in the definition ](https://sourceforge.net/p/qpc/feature-requests/142/)


__Fixed Bugs:__

- [bug#216 Generated code for QP version check violates MISRA-C Rule 10.1](https://sourceforge.net/p/qpc/bugs/216/)

@note
For compatibility with the MISRA-C Rule 10.1, the generated code requires `QP_VERSION` to be defined as an **unsigned constant** (e.g, 633U), which is the case in QP 6.3.3 and higher.

The following example shows the code that is now generated:
@code
/* Check for the minimum required QP version */
#if (QP_VERSION < 630U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpc version 6.3.0 or higher required
#endif
@endcode


@section qm_4_2_1 Version 4.2.1, 2018-05-20
This release partially implements the following feature:
- [feature#117 "Automaticly generate QS_FUN and QS_SIG dictionary calls"](https://sourceforge.net/p/qpc/feature-requests/117/)

"Partially" means that the [QS_FUN_DICTIONARY()](https://www.state-machine.com/qtools/qs__copy_8h.html#a3b1ab21c174f2bec448edec8865a8529) macros are generated for a given state machine in the top-most initial transition (if selected in the @ref sm_statechart_prop "Statechart property sheet"). The [QS_SIG_DICTIONARY()](https://www.state-machine.com/qtools/qs__copy_8h.html#a9a8e26a01678f160bf35fd0bda6bfe8b) macros are not generated at this point, because it might be repetitious (for signals shared with other state machines).

Additionally, this release improves the output from running [external tools](https://www.state-machine.com/qm/ui_tools-dlg.html) in that the output sent to stderr is shown in magenta to distinguish it from the output to stdout, which is shown in black.


@section qm_4_2_0 Version 4.2.0, 2018-05-04
This release fixes several issues with submachines, especially when used in the [Spy build configuration](https://www.state-machine.com/qtools/qs.html).

__Fixed Bugs:__

- [bug#213 "QP/C/C++ applications with submachines occasionally crash in Spy build configuration"](https://sourceforge.net/p/qpc/bugs/213/)

- [bug#212 "QM 4.1.x crashes when closing a model with submachines"](https://sourceforge.net/p/qpc/bugs/212/)

- [bug#211 "QM 4.1.x C++ code generated for a submachine does not compile"](https://sourceforge.net/p/qpc/bugs/211/)

- [bug#210 "QM 4.1.x $define1 directive generates submachines recursively"](https://sourceforge.net/p/qpc/bugs/210/)

- [bug#209 "QM 4.1.x generates comments with a typo 'intitial' instead of 'initial'"](https://sourceforge.net/p/qpc/bugs/209/)

- [bug#208 "QM 4.1.x QP/C code causes assignment from incompatible pointer type warnings in submachines"](https://sourceforge.net/p/qpc/bugs/208/)

@attention
The fix for [bug#213](https://sourceforge.net/p/qpc/bugs/213/) required changes in the QP/C/C++ code. Therefore, this version of QM requires QP/C/C++ **6.3.0** or newer.


Also, this release adds an additional check in code generators for QP/C (@ref bm_qp_item "qpc") and QP/C++ (@ref bm_qp_item "qpcpp") for @ref sm_xpseg "eXit-Point Segments". Specifically, any @ref sm_choice "choice segments" attached to an @ref sm_xpseg "eXit-Point Segment" must be **complementary**, meaning that you must use the @ref sm_choice_else "else guard" to complement any other choices attached to the end of an eXit-Point Segment. A non-complementary set of choice segments results in the code generation ERROR C113 "exit-point with non-complementary guards".

__Implemented Feature Requests:__

- [feature#138 "Return non-zero exit codes when errors occure with generating files"](https://sourceforge.net/p/qpc/feature-requests/138/)

This means that `qm` called from @ref gs_run_cmd-line "command-line" will return non-zero code when code generation fails (-c option) or when diagram generation fails (-d option).

Finally, this release removes the extra new-lines from the log output for @ref ui_tools-dlg "external tools". Specifically, the output for long-running tools (e.g., `avrdude`), which update the log frequently to report progress no longer contains superfluous new-lines.


@section qm_4_1_2 Version 4.1.2, 2018-03-05

__Implemented Feature Requests:__

- [feature#104 "Enable command line option in qm to export state machine diagrams"](https://sourceforge.net/p/qpc/feature-requests/104/)

Specifically, the QM application has been re-architectured to support the @ref gs_console "console-mode", in which it does not launch the GUI but instead it processes the command-line arguments, prints the results to the console and exits. The following command-line options have been added:

- `-h` prints help to the console and exits
- `-c [item]` generates code for the given model `[item]` and exits
- `-d [item][.png|.emf]` generates diagram from the given model `[item]` and exits

@note
The @ref ce_qmc "qmc command-line utility" is still provided for background compatibility, but it will be phased out in the future as the `qm` application now supports code generation in command-line mode.


@section qm_4_1_1 Version 4.1.1, 2018-01-10

__Fixed Bugs:__

- [bug#194 "Code generation for C++ misses new line after the end of namespace"](https://sourceforge.net/p/qpc/bugs/194/)

- [bug#195 "Syntax highlighting missing for the new code-generation directives"](https://sourceforge.net/p/qpc/bugs/195/)

- [bug#196 "Assertion for classes not descending from a state machine"](https://sourceforge.net/p/qpc/bugs/196/)

- [bug#197 "Generated file header contains absolute local file path instead of relative file path"](https://sourceforge.net/p/qpc/bugs/197/)


@section qm_4_1_0 Version 4.1.0, 2017-11-10

__Implemented Feature Requests:__

- [feature#135 "Allow external files that can be edited outside QM"](https://sourceforge.net/p/qpc/feature-requests/135/)

This frequently requested feature allows developers to designate files as @ref ce_file_extern "external files" and to edit such files with an editor/IDE of choice. Still such @ref ce_file_extern "external files" participate in the code generation process.

Second, this release fixes bugs still found in the @ref sm_subm "sub-machine support". Specifically, this release fixes bugs in transitions out of @ref sm_xpseg "eXit-Point Segments" (to @ref sm_epseg "Entry-Points" and to @ref sm_hist "History"):

__Fixed Bugs:__

- [bug#190 "Exit-Point segment targeting History doesn't work"](https://sourceforge.net/p/qpc/bugs/190/)

- [bug#189 "Exit-Point segment targeting an Entry-Point to sub-machine state doesn't work"](https://sourceforge.net/p/qpc/bugs/189/)

Additionally, this release disallows attaching @ref sm_hist "History" connectors to sub-states nested within a sub-machine. (Sub-machines support History only on the boundary, but not inside sub-machines). This is a resolution of the bug#187:

- [bug#187 "History not working in sub-state machines"](https://sourceforge.net/p/qpc/bugs/187/)

Finally, version 4.1.0a fixes the bug#192:

- [bug#192 "Crash in module codec:286, QM version 4.1.0"](https://sourceforge.net/p/qpc/bugs/192/)

@attention
This QM release 4.1.0 requires **QP/C/C++/nano version 6.0.1 or newer**. This is because QM 4.1.0 assumes the modified @ref sm_class_qmsm "QMsm-state machine implementation strategy" in order to properly handle the various transitions out of eXit-Points in sub-machine states


@section qm_4_0_3 Version 4.0.3, 2017-05-30
This release fixes the following bug:
- <a href="https://sourceforge.net/p/qpc/bugs/173/" target="_blank" class="extern">bug#173</a> Exiting submachine state through an eXit-Point Segment fails to execute exit action from submachine

Also, this release implements the following feature request:
- <a href="https://sourceforge.net/p/qpc/feature-requests/122/" target="_blank" class="extern">feature#122</a> Code generation from External QM Packages should be relative to the Package File



@section qm_4_0_2 Version 4.0.2, 2017-05-26
This release fixes the following bugs:
- <a href="https://sourceforge.net/p/qpc/bugs/168/" target="_blank" class="extern">bug#168</a> Submachine with substates nested deeper than 2 levels generates code that does not compile
- <a href="https://sourceforge.net/p/qpc/bugs/170/" target="_blank" class="extern">bug#170</a> Incorrect behavior for an eXit Point with a Choice Segment in a sub-machine
- <a href="https://sourceforge.net/p/qpc/bugs/172/" target="_blank" class="extern">bug#172</a> Resizing a submachine state causes misalignment of eXit Point Segments

@note
bug#172 was introduced in QM 4.0.1 in the process of fixing bug#164 "Self-transitions become zero-sized during resizing". The adapted solution for bug#172 was to remove the fix for bug#164, which means that self-transition can become zero-size when a state is squeezed in size. Such zero-size self-transitions can still be selected from the Model Explorer and after this the attachment points can be dragged out, so that it is indeed possible to recover such transitions.


Additionally, this release implements the following feature requests:
- <a href="https://sourceforge.net/p/qpc/feature-requests/124/" target="_blank" class="extern">feature#124</a> Initial transitions should be able to target Entry Points in submachine states


@section qm_4_0_1 Version 4.0.1, 2017-04-05
This release fixes the following bugs:

#164 "Self-transitions become zero-sized during resizing" (
https://sourceforge.net/p/qpc/bugs/164/ )

#165 "Exit point segment displays action code rather than pseudocode" (
https://sourceforge.net/p/qpc/bugs/165/ )

#161 "Assertion failed in QM version 4.0.0, module propsheet:367" (
https://sourceforge.net/p/qpc/bugs/161/ )


Specifically for Bug#164, the policy of resizing states has changed. Previously, QM allowed making states smaller, even if some attachment points for transitions needed to be moved along the edges of the state. Now, QM will not allow a state to get smaller, if this would require shifting any attachment ponts along the edges. The user must first move the attachment point explicitly.


@section qm_4_0_0 Version 4.0.0, 2016-12-07
This milestone release introduces reusable @ref sm_subm "Submachine Diagrams" and @ref sm_smstate "Submachine States" along with all the necessary "plumbing gear", as specified in the UML. These mechanisms are important, because they allow you to capture any common behavior of composite states as "submachines", and subsequent **reuse** by instantiating them possibly *multiple times* in the context of a single state machine. The implementation of this feature is quite elaborate and practically doubles the number of state machine elements that QM must support. The following elements have been added:

- <span class="img submachine"></span> @ref sm_subm "Submachine Diagram"
- <span class="img ep_seg"></span> @ref sm_epseg   "Entry-Point Segment"
- <span class="img xp"></span> @ref sm_xp          "eXit-Point"
- <span class="img sm_state"></span> @ref sm_smstate "Submachine State"
- <span class="img xp_seg"></span> @ref sm_xpseg   "eXit-Point Segment"

@note
The @ref sm_subm "Submachine Diagrams" and @ref sm_smstate "Submachine States" are only supported in the @ref ce_qmsm_strategy "QMsm-style state machine implementation strategy" and require QP/C or QP/C++ <b>5.8.0</b> or later.


Additionally, the @ref sm_hist "History Transition" was extended to also work for Submachines.

Additionally, QM 4.0.0 adds the following new features and improvements:
- Added option to specify relative path name to license file (feature request #108). The chosen setting for this option is stored in the session file associated with the model.
- Added option to save model links as comments inside XML model files (selectable in model property sheet, option "save links"). This feature can be very helpful to quickly locate model elements (by copying the adjacent XML comment and pasting them into QM as "Paste Link" F5)
- Added Shallow History option so that both Shallow and Deep History transitions are now supported
- Added styling options in QM Style Sheet for selected items in Model Explorer and Search
- Fixed text-sizing problems in diagrams on hi-resolution displays. The QM Style Sheet now accepts diagram fonts specified in pixels. The pixel-sized fonts work also correctly in exporting diagrams to EMF vector format.
- Fixed bugs in exporting diagrams to EMF (Windows only)
- Improved the "External Tools" feature (specifically, the "working directory" for the tool is now applied correctly)
- Added option to store the QM License certificate relative to model file (stored in the model file) or absolute (stored in the session file). This option is selectable with a checkbox added to the "Code Generation License" dialog box.
- Refactored several features to improve consistency and stability (failures due to hitting internal assertions).
- Updated the internal models of QP frameworks (qpc, qpcpp and qpn) to reflect the class structure for QP 5.8.0.@n <span class="highlight"><strong>NOTE:</strong> The **QFsm** base class is no longer present in the internal QP models. Consequently older QM 3.x models that reference the QFsm superclass will cause error **Corrupted references in the model file**</span>
- Upgraded to Qt 5.6.2
- Added QM for 32-bit Windows that runs on 64-bit Windows as well.
- Changed code generation policy for the @ref ce_qmsm_strategy "QMsm-style state machine implementation strategy", which now requires @ref ui_license_cert "QM license certificate".

@attention
Starting from this version, a valid @ref ui_license_cert "QM license certificate" is required to generate code with the  @ref ce_qmsm_strategy "QMsm-style state machine implementation strategy". Evaluation licenses are included in QP/C and QP/C++ 5.8.0. Extensions of these evaluation licenses will be granted liberally after filling out the no-obligation <a href="https://www.state-machine.com/licensing/#RequestForm"><strong>License Request Form</strong></a>.


@section qm_3_3_0 Version 3.3.0, 2015-05-15
This QM release updates the internal models of the QP frameworks to match the recent QP 5.4.x. Specific changes include:

1. Updated class hierarchy such that QMActive is the superclass of QActive.

2. The QFsm class and state machine implementation strategy is now deprecated. Any existing models that use QFsm will still load correctly, but the code generated will be in QHsm-style.

Implemented the following feature requests:

#93 "Display full path of recent projects in File menu". QM 3.3.0 adds the "Recent Model" sub-menu to the File menu. This "Recent Models" sub-menu contains a list of up to 16 most recently used models with full paths. Also, the "Recent Models" list can be cleared by the "Clear Menu" action.

#101 "extend Conditional Compilation to class attributes". In fact, QM 3.3.0 recognizes conditional compilation for attributes (class attributes and free attributes) as well as for operations (class operations and free operations).

Finally, this version moves the location of the QM online help to:

https://www.state-machine.com/qm/


@section qm_3_2_2 Version 3.2.2, 2014-10-16
This QM release fixes the following bugs:

<a href="https://sourceforge.net/p/qpc/bugs/108/" target="_blank" class="extern">#108</a> "Corrupted references reported in models with long class names"


@section qm_3_2_1 Version 3.2.1, 2014-10-09
This release implements the feature request #100 "Conditional
compilation for state machine elements" (see
https://sourceforge.net/p/qpc/feature-requests/100/ ) The feature
description and usage are available in the QM Help at the following URL:

https://www.state-machine.com/qm/ce_cond.html

This release also improves generation of the comments with model links
(to navigate from the code to the model). The links now consistently use
abbreviated names (significant to 16 first characters).

Finally, this QM release fixes the following bugs:

#107 "multiline guard conditions indented incorrectly" (
https://sourceforge.net/p/qpc/bugs/107/ )

#100 "QM 3.1.3 multiple sigs on one transition no longer generates
compileable code" ( https://sourceforge.net/p/qpc/bugs/100/ )

#99 "Pastelink function does not work" (
https://sourceforge.net/p/qpc/bugs/99/ )

#84 "Export to EMF bug" ( https://sourceforge.net/p/qpc/bugs/84/ )

#69 Search can lose pending changes (
https://sourceforge.net/p/qpc/bugs/69/ )


@section qm_3_2_0 Version 3.2.0, 2014-08-02
This release is only for **64-bit** desktop operating systems, such as
Windows 7/8 64-bit, Linux 64-bit, and Mac OS X 64-bit.

\attention
Moving forward, the QM tool will be offered only on the 64-bit desktop
operating systems and the 32-bit operating systems will no longer be supported.

Also, this release switches from using Qt4 to the latest Qt5 toolkit.

The the Qt5 toolkit is now used under the terms of the LGPL 2.1 license,
whereas before the Qt4 toolkit was used under a commercial Nokia license.

For compliance with LGPL 2.1, the QM distributions contain the <a class="extern" target="_blank" href="https://www.state-machine.com/qm/qt_lgpl.html">LGPL
Compliance Package</a>, which provides information how to obtain, install,
and build the Qt toolkit from sources.


@section qm_3_1_3 Version 3.1.3, 2014-04-30
This release fixes the following bugs, all related to the history
connector (see https://sourceforge.net/p/qpc/bugs):

#95 "Resizing of state with history generates "Assertion failed" error."

#96 "Incoming transitions to a history connector stretch incorrectly
when the state is moved"

#97 "Newly added history connector not moving when the state is resized."

\note This release does not change the QM code generation in any way.


@section qm_3_1_2 Version 3.1.3, 2014-04-25
This release fixes the following bugs (see
https://sourceforge.net/p/qpc/bugs):

#93 "CATCH_ALL: code for action is generated twice"

#94 "Transition to history from a choice segment generates incorrect code"

Also, this release changes the C++ code generation for QP/C++. Only
short names, not qualified by the class name are used inside the
state-handler functions and action-state tables. For example
Q_TRAN(&state1) is used instead of Q_TRAN(&Foo::state1).


@section qm_3_1_1 Version 3.1.1, 2014-04-15
This release fixes the inconsistency in copying model links into the
clipboard (bug #92). The model links are now generated in the format
${name::name::name} which is the same as links inserted into the
generated code.

Also, this removes the decoration of the names of superclasses displayed
in the Class Property Sheet. The superclass names were displayed in the
combo box in the form ${name::name::name}, whereas they should be shown
as name::name::name.


@section qm_3_1_0 Version 3.1.0, 2014-03-31
This release adds the "transition to history" (deep history) to QHsm and
QMsm state machine classes and their subclasses, such as QActive and
QMActive.

\attention To build the code generated for the "transition to history"
feature in QM 3.1.0, you need QP 5.3.0 or newer.

\note QM 3.1.0 remains backwards compatible with models generated by the
earlier QM versions (2.x) for QP 4.x, but you need to re-generate the
code to build it for the QP 5.3.0 frameworks.

The "transition to history" feature is implemented by adding a new
"transition to history" icon to the state diagram drawing toolbar. This
new connector can be added to states, but it binds only to the *border*
of a state, as opposed to the interior of a state. This is intentional
to make transitions to history also available to submachine states,
which will be supported in the future.

Once the "transition to history" connector is attached to a state
border, it's other end with an arrow needs to point to a substate, which
will be the initial value of the state history, before the state is
visited and the actual history is recorded. The 'H' circle of the
"transition to history" connector can be a target for regular
transitions and for choice segments. There can be only one "transition
to history" connector attached to a given state.

For each "transition to history" connector, tghe code generator in QM
generates a history attribute in the state machine. This history
attribute is set in the exit action of the corresponding state to store
the history of the composite state.

This release also brings several improvements to the QM code generator.
First, the model reference comments are now generated for user-specified
names rather than for the internal model references. This makes the
references human-readable, but more importantly, the references don't
change after adding/deleting/reordering model elements. This prevents
many instances of re-generating code where only the references in the
comments changed, while in fact the actual code was the same.

Other improvements to the code generator include removal of unused tags
in declarations of structures. This is to achieve compliance with the
new MISRA-C:2012 Rule 2.4.

Also, the code generator now detects unused 'me' arguments, and
generates code "(void)me;" to prevent compiler warnings about unused
arguments.

This release makes slight improvements in the rendering of diagrams. The
boarder of selected diagram items (e.g., states, transitions, etc.) is
now thinner (2 pixels) as opposed to heavy-looking 3 pixels before.
Also, to save precious space, the entry/exit labels for state actions
have been abbreviated to e/x.

This release fixes the following bugs (see
https://sourceforge.net/p/qpc/bugs/):

#88 "Problem with QM model encoding"

#87 "QM 3.0.1 crashes with Assert after undo"

#84 "Export to EMF bug"

#70 "Property change not sensed as pending change"

#67 "Constructor code not always generated"

Finally, this release implements the following feature requests (see
https://sourceforge.net/p/qpc/feature-requests/):

#17 "Deep history feature support"

#67 "Implement history pattern in QM"

#61 "Compiler rises warning when modeling a transition to history"

#90 "Enlarge default transition text box": the initial size of the
transition box has been increased from 6 to 10 grid units.


@section qm_3_0_1 Version 3.0.1, 2014-01-07
This release fixes a bug in generating the default case in state
machines based on QFsm. Also the code generation for the special case of
the CATCH_ALL trigger for QHsm/QFsm has been improved.


@section qm_3_0_0 Version 3.0.0, 2014-01-01
The main purpose of this milestone release is the new code generation
for the new state machine implementation added in QP5. This new type of
state machine implementation in QP5 is based on the new QMsm class,
which takes advantage of the QM tool as an advanced "state machine
compiler". QM can perform optimizations that were not possible with the
C pre-processor alone. Specifically, the QM can easily determine the LCA
(Least-Common-Ancestor) state for every transition and it can generate
the complete transition-action-tables (sequences of exit/entry/initial
actions) at code-generation time. The resulting code is still highly
human-readable, but it is no longer human-maintainable, because
generating transition-action-tables by humans is too error-prone. The
lab tests indicate that the new "housekeeping" code for executing
hierarchical state machines is about twice as fast as the code based on
the QHsm class. Additionally, the new code requires less run-time
support (smaller event processor) and uses 70% less of stack space in
the call to the QMsm::dispatch() operation than QHsm::dispatch().

This release also fixes several bugs related to Cut-and-Paste feature,
saving the model with the shortcut Ctrl-S, and editing the actions while
searching the model.

\note QM 3.0.0 remains backwards compatible with models generated by the
earlier QM versions (2.x) for QP 4.x. In other words, you don't
necessarily need to upgrade to QP5 to use QM 3.x, but you won't be able
to use the QMsm and QMActive base classes, as they are not provided in
QP 4.x.


@section qm_2_3_2 Version 2.3.2, 2013-05-20
This is a quick update release to fix the bug introduced in 2.3.1, which
caused a crash when adding a class item to a package. Additionally, this
relase brings the following minor improvements:

1. The TAB key in the code editor does not always indent the line. When
no selection is present, a TAB key inserts 4 spaces at the cursor
position instead of indenting the whole line.

2. The log has a new option to clear the log via the "Clear All"
popup menu. The log is also cleared when (re)opeinig a new model file.

3. Fis for an occasional inconsistency in the "Replace Mode" option
setting and the state of the Search Options button.


@section qm_2_3_1 Version 2.3.1, 2013-05-16
This is a quick update release that fixes a few following problems found
in 2.3.0:

1. The copy/paste feature didn't reliably detect the element type in
the Clipboard. The formatting of the Clipboard MIME data has been
slightly changed, which fixed the problem.

2. The code generation and external tools actions were not properly
enabled after creating a new model.

3. The window title of a state diagram didn't change after changing
the class name.

4. The CATCH_ALL trigger was not implemented for FSMs.

Thank you to all reviewers, who immediately contacted Quantum
Leaps. This is "massive parallel testing" at its best!


@section qm_2_3_0 Version 2.3.0, 2013-05-15
This release introduces a number of features and fixes most of the
reported bugs in QM (see feature requests and bug reports on
sourceforge.net/p/qpc/_list/tickets ).

\note QM 2.3.0 remains compatible with models generated by the earlier
QM versions (2.x).

New GUI Features:

1. Model-wide search and replace (feature request #49). The QM GUI now
includes a search dock-widget with a search box and model tree-view
similar to the Model Explorer. The tree-view allows the user to select
the model element for search, which can be recursive. A number of usual
search options are provided, such as case-sensitivity, match whole word,
etc. The search elements can be finely controlled by provided options,
e.g., search in names, code, pseudocode (abbreviations), documentation,
etc. The replace feature allows the user to replace strings one at a
time, or replace all in the given model element. Just like the search,
replace can be recursive.

2. Storing/restoring the current QM session (feature request #41). QM
now stores the current session, including the open windows and their
arrangement, external tool settings, locked items, etc. The session is
associated with a given model and is stored in this model's directory.
The session is restored when this model is (re)opened.

3. License management for QM code generator. QM now displays the license
information of the underlying QP framework, which is licensed separately
either under the GPL open source license, or commercially. The QP
license information is now also embedded in the generated code. This
feature is designed to educate and inform about open source licensing
obligations without being intrusive. The feature also offers a
commercial QP license registration to all commercial QP licensees.

4. Fine-granularity locking/unlocking model items (feature requests
#56/#52). QM now allows you to lock individual packages, directories,
and files from editing, whereas previously you could lock only the
entire model. This version also fixes a number of "holes" in the
protection of the locked items.

5. Improved MDI (multiple document interface), which now supports
movable tabs (feature request #5). Also, the window-state
(normal/maximized) is now independent on the use of tabs. For example,
you can have tabs and normal re-sizable windows at the same time.

6. Added new grid options for diagrams and added grid selection button
to the View toolbar. The grid can be displayed as fine-dot fine-line,
and dot-line. This feature helps in aligning states/transitions and
indirectly addresses the feature request #35.

7. Added listing of triggers for states. The feature is available in the
popup-menu for state items. QM performs the non trivial analysis of
triggers with guards, and lists triggers that can "bubble up" to higher
level states.

8. Added toolbar buttons to quickly hide/show all dock-panels of the
GUI, such as Property Editor, Bird's Eye View, Log, etc. (feature
request #39).

9. Added exporting diagrams to the .png raster format for all platforms.
The EMF vector format (Enhanced Windows Meta-File) is available only on
Windows.

10. Improved importing/exporting packages to external files. Now, the
extension .qmp (QM Package) is enforced and any non-existing directories
for exporting package files are created correctly.

11. Added read-only protection to the model files and package files.

12. Improved the status bar display of current (x,y) cursor position in
the diagram. Allowed negative (x,y) values.

13. Improved the status bar display of the current (Line/Column) cursor
position in the file(s). The column position starts with 1, consistently
with all other editors.

New QM Code Editor Features:

14. Added Quick search in the current editor (F3-search), which is
independent on model-wide search (but is integrated with the search
view). The quick F3-search can be initiated by selecting a text and
pressing Ctrl-F3. Next, you can search forward (F3) or backward (Shift-F3).

15. Improved code indenting/un-indenting with TAB/Shft-TAB.

16. Added brace/parenthesis matching (brace "kiss") with Ctrl+K

17. Added "delete till end-of-line" with Ctrl+Del

18. Added new file type and syntax highlighter for TCL/TK scripts
(extension .tcl)

19. Improved syntax highlighter for C/C++ by adding all missing keywords.


New Code Generation Features:

20. Added generation of comments from QM documentation properties
(feature requests #26/#23/#24/#37). The documentation for states,
operations, and attributes can contain embedded comments, which are
emitted to the generated source code (separate comments can be applied
to declarations and definitions). This allows users to generate
doxygen-type comments for automatic generation of HTML documentation.
Also users can generate "comment boxes" for compliance with their coding
standards.

21. Changed the local variable returned from states from 'status' to
'status_' to avoid name conflicts with user-defined variables.

22. Introduced the special CATCH_ALL trigger to catch processing of all
events in a given state (feature requested from a commercial customer).
This feature is NOT generally recommended.

23. Improved code generation and inconsistent "static" linking for file-
scope functions and attributes. Added missing new-lines in several cases
(bugs #34/#40).


New External Tools Features

24. Added environment variables for the external tools. For example, you
can modify the PATH variable locally or specify any variable
consistently for all tools. The environment variables can be also used
in the arguments of external tools and are substituted before invocation
of the external tool. Fixed problems with parameters surrounded by
double quotes (bug #50). The output from external tools to the QM Log
has been improved, so that the output is identical as it would be on a
console. Finally, external tools can also be detached from the QM GUI,
which can be useful for launching external serial terminals, QSPY, or
other such tools.

Other Bug Fixes:

25. Added toolbar buttons for moving model items up and down in the
Explorer (bugs #36/#37/#45/#47, feature request #54). This fixes the
problems with the shortcuts for these commands (Ctrl+UP/Ctrl+DOWN) and
allows re-arranging the order quickly and easily.

26. Fixed the problem with copy/paste statechart items (bugs #53/#57).

27. Fixed problems with Property Editor switching current item when
losing the keyboard focus to other applications (bug #38). Now switching
between applications on your desktop no longer changes the current item
when you get back to QM.


@section qm_2_2_03 Version 2.2.03, 2012-09-10
This release fixes two bugs introduced in 2.2.02 and brings a few
improvements to the code generation.

1. Restored saving the model before generating code, which was
not happening in version 2.2.02.

2. Fixed the bug #34 (inconsistent linkage error), in which a free
operation with 'file' visibility had a declaration without 'static'
and definition with the 'static' keyword. The fix for this bug also
improves the consistency of checking whether an item is declared and
defined in the same file scope (so that 'static' can be generated
automatically).

3. Fixed the bug #35 (assertion in QM 2.2.02, module statesheet:140),
which fired after editing the exit abbreviation in the state property
sheet.

4. Added code generation for packages. A package item in the
Explorer window now has the "Generate Code" option in the popup-menu
and a package item can be specified in the code generating directives
$declare and $define.

5. Added 5th external tool to the Tools menu with the keyboard
shortcut F12, so now the Tools menu uses the following shortcuts:
F7 for code generation and F8-F12 for tool1-tool5, respectively.


@section qm_2_2_02 Version 2.2.02, 2012-09-02
The main focus of this release is the External Tools feature, which
allows the users to execute their own command-line tools, such as make,
lint, qspy, etc. directly from the QM IDE. This release also fixes all
known bugs and implements a few feature requests. The detailed changes
are as follows:

1. Implemented the new Tools menu and customizable toolbar. Please refer
to the QM help file https://www.state-machine.com/qm/ui_tools-dlg.html for
the description of how to use the new feature.

2. Implemented block-indenting of code with the TAB key and un-indenting
with Shitf+TAB.

3. Moved the "Generate Code" action from the File menu/toolbar to the
Tools menu/toolbar.

4. Fixed bug #29 (assertion when dragging a component and droping it
on self).

5. Fixed other drag-and-drop issues.

6. Added documentation panel to the state item (feature request #37)
and generation of the doxygen comment from this documentation.

7. Fixed the problem with black diagram background in the EMF export
(feature request #36).

8. Added keyboard shortcuts to hide/show docking windows (Property
Editor, Explorer, Log, Bird's Eye View) for the feature request #39.

9. Code Generation: raised the state nesting limit to 10 (including
the top state) and the choice segment nesting limit to 10.

10. Improved the precision of syntax highlighting for pre-processor
symbols and for C/C++ keywords.


@section qm_2_2_01 Version 2.2.01, 2012-08-14
This minor release fixes bug #33 (assertion in module item, line 383),
which popped up with new attribute or operation was added to a package.


@section qm_2_2_00 Version 2.2.00, 2012-08-06
The main focus of this release is MISRA compliance of the generated
code. This release also brings several feature improvements, new
features, and bug fixes. This release also removes the separate project
examples that used to ship with QM. This release is compatible with QP
4.5.02 or later, all of which include QM models in the example projects.
The detailed changes are as follows:

Code Generation:

- Changed code generators for QP/C, QP/C++, and QP-nano to use the MISRA
switch statement syntax rather than "return" statements in each case.

- Chagned code generators for QP/C and QP-nano to generate "static"
class methods if the class declaration and defition is made in the same
file scope (MISRA-C:2004 Rule 8.11-required).

- Chagned code generators for QP/C and QP-nano to use "ClassType - const
me" instead of just "ClassType * me" for class methods, including state
handlers.

- Updated all internal QP models to QP 4.5.xx (e.g., use QEvt instead of
QEvent, etc.)

- Changed code generators for QP/C, QP/C++, and QP-nano to use QEvt
instead of QEvent for state machines.

\note For backwards-compatibility, the base class name "QEvent" is
recognized and replaced with "QEvt".

- Changed code generator for QP/C++ to generate the QP namespace prefix
for all QP elements (e.g., QP::QEvt, QP::QState, etc.), which is
required by MISRA-C++:2008.

- Added code generation errors for too many levels of state nesting
(greater than 6) and choice-segment nesting (greater than 5).

Explorer View:

- Eliminated the file-system item and replaced it with directory item.

- Allowed Directory items in Package items, so that directories and
files can be exported to external packages.

- Removed the little toolbar from the top of the Explorer View and added
the "Move Up" and "Move Down" actions to the pop-up menus for items.

Property Sheets:

- Added "namespace" attribute to the Package property sheet. Using
namespaces is required for MISRA-C++:2008 compliance (feature request
#3527678).

- Added abbreviation to the Choice-segment guard specification (feature
request #3527678).

- Added property sheets for Framework, Directory, and File items.

- Added "encoding" property to the File item property sheet.

Diagrams:

- Allowed the diagram viewport to expand to enclose all items, including
items moved outside the drawing canvas above the top edge or left of the
left-edge.

- Changed the default postion for pasting state shapes to the diagram to
be oustide the drawing canvas (just right of the right edge of the
canvas.) This was done to reduce the interference of the pasted state
shapes with already existing states.

Bug fixes:

- Bug # 3505266: Fixed the bug with copying-and-pasting classes, which
disconnected all transitions in the statechart of the pasted class.

\note The copy-and-paste feature has been re-designed for this release.

- Bug # 3447488: Fixed occasional QM crash after clicking "File|Close
Model" menu.

- Bug # 3472949: Fixed the problem of drag-and-dropping a component onto
its child.

- Bug # 3553912: Fixed the incorrect handling of the Ctrl+W shortcut
(close window) in the Tabbed mode. Now, the shortcut Ctrl+W is
implemented explicitly (whereas before is was showing as Ctrl+F4).

Miscellaneous:

- Added wait cursor when loading/re-loading the model file.
- Added dran-and-drop for directories into packages.


@section qm_2_1_02 Version 2.1.02, 2011-12-28
- Fixed the problem with the keyboard focus being removed from the
  Property Editor when the mouse pointer is moved over a diagram.
  Now editing text properties can continue regardless of the
  position of the mouse pointer.
- Modified the behavior of the main window to eliminate the annoying
  context switches when the user moves the keyboard focus to another
  desktop application. Now the Bird's Eye View, the Toolbox, and the
  Property Editor would not be deactivated when the user clicks
  outside the QM application.
- Added menu command and toolbar button for copying model links to
  the Clipboard. This is useful for quickly finding the corresponding
  model elements in the generated code (through the standard text
  find feature available in virtually all code editors and IDEs).
- Changed the code generation to generate consistently the @()-style
  model links to match the copy-link feature.
- Fixed the bug with model name not appearing in the Model Explorer
  when a new model is first created.
- Fixed the unexpected switching of the Current Model Item when the
  user double-clicked text or code in the Property Editor.
- Improved model checking to disallow creating circular dependencies
  of choice segments, which was possible when the begin of the parent
  choice segment was moved to the free-end of a child choice segment.
- Changed displaying text in the diagrams to show only complete
  lines rather than cutting the text horizontally and showing only
  top slice of the last line.
- Added the standard file extension ".ino" for the Arduino sketches,
  to recognize this file type and apply the correct (C++) syntax
  highlighting. The extension ".ino" has been added in the latest
  release of the Arduino IDE (Arduino 1.0).


@section qm_2_1_01 Version 2.1.01, 2011-11-04
- This release allows specifying comma-separated trigger lists
  for transitions as opposed to just single triggers. The code
  generator converts the trigger list into fall-through case
  statements.
- Updated all examples for compatibility with QP 4.3.00.
- Fixed a bug which caused crash when a model file failed to
  opened (due to version incompatiblity or a missing imported
  package) and the user would double-click on the Log message to
  inspect the failure cause.
- Fixed a bug causing assertion on Mac OS X in module nodeglyph,
  line 289.


@section qm_2_1_00 Version 2.1.00, 2011-10-20
- This release provides support for breaking up model files into
  separate package files, which can be imported (included) in any
  number of models. This feature allows teams to work on different
  parts of a large model by breaking it up into independently
  managed and version-controlled packages.

- Fixed the inconsistency between reading and writing the file items,
  which for empty files lead to "WARNING F802> ...parsing the model
  template file failed". Specifically, this warning occured for the
  model templates provided in the QM distribution.
- Fixed the bug in resizing the diagram canvas, which could lead
  to breaking an assertion on Mac OS X (when the mouse coursor would
  momentarily leave and re-enter the diagram area).
- Fixed the inconsistentcy in enabling and disabling of copy/cut/
  paste/delete actions, which could lead to breaking an assertion
  in explorerview, line 321.


@section qm_2_0_0 Version 2.0.00, 2011-09-21
- This release provides support for Cut/Copy/Paste of model
  items within one model and accross different models opened
  in separate instances of QM.
- The model file format has chaned compared to QM 1.x (to reuse
  the model serialization for Cut/Copy/Paste). This means that
  the models created with QM 1.x are incompatible with QM 2.x.

  ***
  \note the `<qm>/bin/` directory contains the utility qmconv-1-2
  for converting models created with QM 1.x to QM 2.x.
  ***

- Added panning of the current viewport to the Bird's Eye View.
- Added Cut/Copy/Paste/Delete actions to the popup menus inside
  the Model Explorer.
- Fixed several bugs and inconsistencies.


@section qm_1_1_08 Version 1.1.08, 2011-08-11
- This release is the first one available for all three platforms:
  Windows, Linux, and Mac OS X.
- The directory structure of the QM installation has been modified
  to accomodate Mac OS X and to make it common for all platforms.
- Changed the behavior of the "Generate Code" command to
  save the model to disk before generating code.
- Changed the keys for panning and zooming of diagrams with the
  mouse to make it consistent with popular programs such as GIMP
  or Google Maps (bug #3381122). Now SHIFT activates panning and
  horizontal scrolling with the mouse wheel. When SHIFT is
  depressed, rotating the mouse wheel towards the back of the
  mouse will scroll horizontally right (i.e., the horizontal
  scroll bar will move right). This is exactly as in GIMP.
  CTRL activates selecting and zooming with the mouse wheel.
  When CTRL is depressed, rotating the mouse wheel towards the
  back of the mouse will zoom out.
- Fixed the problem with C-style comments at the end of a file
  (bug #3355437).
- Fixed the problem with print crashing QM on Linux (bug #3325130).
- Added drag-and-drop of model elements inside the Model Explorer.
  Now you can drag packages, classes, attributes, operations,
  and paramters as well as directories and files (feature request
  #3116849). The drag-and drop feature verifies the types of the
  elements and allows only the meaningful operations. For example,
  dragging a class operation to another class, but not allowing
  dragging a state to a directory.
- Added drag-and-drop of model elements from the Model Explorer
  to files. This allows quick generation of code directives
  without manually typing the element paths.
- Added drag-and-drop of model files from the File Explorer
  (File Finder on the Mac) to the QM manin window, to open
  the model file.
- Added "Close Model" command to the File menu.


@section qm_1_1_07 Version 1.1.07, 2011-06-23
- Fixed the bug causing a crash for the sequence: open an existing
  model, create new model, checking class properties.
- Modified code generation to include generating Doxygen comments
  from the documentation for classes, class attributes, class
  operations, free attributes, and free operations.
- Fixed bug related to incorrect updating of free attribute
  documentation from the property sheet.
- Added collapse/expand button for documentation box in the
  operation property sheet. This is to allow more space for
  the code box.
- Added toggle buttons to the View toolbar to allow easy toggling
  the view of the docking windows (Explorer, Property Editor,
  Bird's Eye View, and the Log).
- Improved/corrected the locked/unloced button behavior and
  added the locked/unlocked status to the status bar.
- Improved/corrected the Grid view button behavior and added
  grid status to the status bar.
- Updated ARM Cortex examples for EK-LM3S811 to use the latest
  IAR EWARM 6.20.


@section qm_1_1_06 Version 1.1.06, 2011-04-27
- This release adds the "locked" moded for exploring or
  reviewing the model without the risk of inadvertently
  modifiying the model.
- Fixed the EMF (Enhanced Windows Metafile) generation issue
  with the bounding box. When shapes in a diagram are selected
  only the selected shapes are rendered to EMF and the bounding
  box is adjusted so that it contains only the selected shapes.
  Previously, the EMF bounding box was always the size of the
  diagram canvas, regardless if only a tiny fragment of the
  diagram was selected and rendered to EMF.
- Fixed the bug with keyboard focus, in which occasionally
  a diagram would ignore the Ctrl or Shift keys (for going
  into Selecting and Panning modes, respectively).
- Added the Show/Hide Grid menu option and toolbar button.


@section qm_1_1_05 Version 1.1.05, 2011-04-22
- This release changes the permissions of the generated files
  to READ-ONLY, to prevent users from editing these files.
  This is to reinforce the policy that all changes need to
  be really made to the QM MODELS, not the generated files.
- Fixed the bug in creating new models, which led to code
  generation errors: "ERROR F031 state machine not allowed
  in this class"
- Fixed the EMF (Enhanced Windows Metafile) generation bug,
  in which all single ampersands ('&') were dropped and double
  ampersands ('&&') were replaced with a single ampersand.
- Fixed the problem with closing a minimized window, which
  would lead to problems in opening the window again.
- Fiexed the problem of not adding newly created models to the
  list of most-recently used models.
- Improved error message reporting from XML parsing of the
  model file.
- Added Help button to the "New Model" dialog box.
- Added .pde file stereotype for Arduino sketches


@section qm_1_1_04 Version 1.1.04, 2011-03-18
- This release adds the QMC (QP Model Compiler) command line
  utility for automated builds.

- Several minor improvements and bug fixes related to abrupt
  interrupting the QM session by popus (such as system update
  notifications).


@section qm_1_1_03 Version 1.1.03, 2011-03-02
- This release includes examples of QM models and projects for
  Windows, Linux, and ARM Cortex.

- The default location of the help and model templates have
  been modified.


@section qm_1_1_02 Version 1.1.02, 2011-01-05
- Made the code compatible with the Linux build (this is the
  first QM version offered for Windows and Linux).

- Added the View|Styles menu.


@section qm_1_1_01 Version 1.1.01, 2011-01-01
- Fixed internal framework models of QP/C++ and QP-nano to
  correctly inherit QActive from QHsm.

- Fixed a bug in the MDI (multiple document interface) related
  to deleting a item with an active open MDI window (such as
  file item or statechart item).


@section qm_1_1_00 Version 1.1.00, 2010-12-30
- Added consistent support for Unicode, from the model file,
  through all model elements, to generated code. Now, you can
  use Unicode characters (e.g., Chinese, Japanese, etc.) in
  your documenation and code (e.g., comments) and they will
  be preserved and propagated to the generated code.

- Added options for specifying text endcoding for the
  generated code and the model file explicitly for most
  encodings used in the world.

- Added customizability of look and feel via a style sheet
 (file qm.qss stored in the QM directory). Now you can customize
 fonts and colors of editors and diagrams.

- Improved log file by adding double-click functionality for
  quickly selecting model elements corresponding to errors or
  warnings. Now you can double-click on any warning or error
  and the related item gets highlighted.

- Added similar double-click functionality to documentation.
  This allows you to build hyper-links for cross-referencing
  items within the model.

- Added documentation entry in property sheets to several model
  items, such as model, class attribute, class operation, free
  attribute, free operation.

- Changed the way of storing documentation in the model file
  from HTML to plain text.

- Added tons of documentation for the QP framework models.
  Now, when you expand the QP framework model item, you can
  find detailed documentation and code examples for all
  classes, operations, and macros provided in the QP
  frameworks.

- Added support for QFsm (flat, not-hierarchical state
  machines), including code generation for classes derived
  from QFsm.

- Improved selecting of diagram items (with Ctrl key) and
  panning of diagrams (with Shift key).

- Fixed bug related to moving complex selections of states
  and transitions, in which transitions could occasionally get
  detached from states.

- Fixed bugs and inconsistencies in the tabbed view (this was
  really an issue of the underlying Qt framework).

- Improved syntax coloring for C/C++. The syntax coloring now
  highlights QM-specific elements, such as code generation
  directives, QP services, etc.

- Added support for Makefiles (syntax coloring and proper
  generation of makefiles).

- Eliminated any dependencies of the QM Windows executable
  on the Visual Studio runtime library redistributable (such
  as msvcr90.dll). The runtime libraries are now linked
  statically.

- Many other cosmetic improvements.


@section qm_1_0_08 Version 1.0.08, 2010-12-12
- Fixed a bug related to undo/redo of moving transitions with
  choice segments attached. The bug occurred when the user
  moved the choice-end of a transition, which had some choice
  segments attached. After executing undo (Ctrl-Z) the attached
  choice segments would not be moved, so they would become
  detached from the transition end.

- Fixed a bug related to invalid initial transitions. The bug
  occurred when the target state of an initial transition was
  deleted (at which point the initial transition changed to
  dashed line) and the user tried to move the ball-end of the
  initial transition.

- Changed the top-level comment placed in the generated code.
  Now, the top-level comment contains only the model file name
  *without* the full path name of the model file. This change
  was to make sure that a given QM model generates exactly the
  same code regardless of the directory in which the model file
  resides. Teams working with VCSs (version control systems)
  often check out the master model in various working
  directories, but they rightly expect that the generated code
  be identical.

- Changed the code generator so that every generated file is
  terminated with the new-line character. Some C/C++ compilers
  require all files to be terminated with new line. Also
  improved parsing of the files and error reporting.

- Added context-sensitive help, which is activated by
  'Ctrl+F1'. The context-sensitive help checks the position of
  the mouse cursor and displays the help for the specific
  window under the cursor.

\note The actual help pages are under development, so currently
only a placeholder page is displayed in your browser. The
online help will be gradually added and you will not need to
upgrade the QM tool to get the new help.

- Other cosmetic improvements.


@section qm_1_0_07 Version 1.0.07, 2010-11-27
- Fixed bug related to adding connectors without dragging them
out of the attachment point, which results in zero-sized
connectors. Such connectors are illegal and were deleted, but
the property sheet was not cleaned up. Now adding a zero-size
connector removes the connector and cleans up all views.

- Added a proactive fix to an unreproducible bug (assertion in
  diagramview, line 214).

- Changed how code editors resize in the Property Editor
  window. Previously the code editor grew only to about 20
  lines of code in vertical direction. Now the code editor
  always fills the whole available vertical space of the
  Property Editor docking widget.

- Made the same change for text (documentation) editors in
  the Property Editor window.

- Added version number reporting in the Assertion message box.
  Most users never reported the QM version number when they
  encountered an assertion failure.

- Implemented editing of a new directory name and a new file
  name immediately after these elements have been added to
  the model.

- Added close button (x) to the subwindow tabs in the tabbed
  view.

- Fixed inconsistent behavior of the tabbed view after closing
  a subwindow.

- Other cosmetic improvements.


@section qm_1_0_06 Version 1.0.06, 2010-11-20
- added docking widget with the zoomed-out view of the current
  diagram ("Bird's Eye View"). The "Bird's Eye View" is designed
  to improve orientation in large diagrams by showing the
  position of the current viewport in the relation to the diagram.

- improved consistency of the diagram panning mode and fixed
  bugs related to entering the panning mode while in the middle
  of moving/resizing nodes or dragging connectors. Now, the
  panning mode can be activated only when there is no dragging
  in progress.

- added vertical scrolling of diagrams with the mouse-wheel

- added horizontal scrolling of diagrams with Shift mouse-wheel

- changed zooming of the diagram to Ctrl-mouse-wheel

- fixed bug related to pressing right or middle mouse buttons
  in the middle of moving node(s) or connectors.

- fixed incorrect behavior of connectors when dragged to
  zero-size (when the begin overlapped with the end).

- other cosmetic improvements.


@section qm_1_0_05 Version 1.0.05, 2010-11-17
- this release fixes the bug in C-code generation in definition
  of free operations.

- there are some cosmetic improvements as well.


@section qm_1_0_04 Version 1.0.04, 2010-11-17
- bug fix in adding and deleting a class to a package

- added diagram zoom slider and buttons in the status bar

- added panning of the diagrams. Panning is activated by
  pressing Shift in an active diagram.


@section qm_1_0_03 Version 1.0.03, 2010-10-29
- bug fix in editing of class documentation that can break
  assertion in classheet, line 148 (this turned out to be an
  undo/redo issue of incorrect unwinding of the undo stack.)

- improved consistency of line-wrapping between screen output
  and EMF output.

- allowed using backslash characters ('\') in guard conditions
  to enforce line breaks in displaying the guard in the diagram.
  The backslashes are removed in the generated code.

- used lighter background colors for states in the EMF output

- added cleanup of the generated code, so that it contains no
  superfluous white space (extra spaces could be present in
  the user-defined action code.)


@section qm_1_0_00 Version 1.0.00, 2010-10-20
The first official QM&trade; release contains the following features:

- Graphical modeling tool based on the UML state machine subset

- Automatic generation of production-quality C or C++ code

- Automatic model verification during the code generation

- Built-in support for QP/C, QP/C++, and QP-nano frameworks

- 100% traceability from design to code

- Ultimate flexibility in generated code design

- Friendly to version control systems (VCS)

- Intuitive diagramming environment for making clean, good-looking diagrams

- Export of diagrams to EMF vector format for direct pasting into MS-Office
  and Open Office applications

- Modern user interface with docking windows with the layout saved across sessions

- State of the art editors for action code with syntax highlighting

- Undo/redo of all model edits

- Quick Clipboard-based navigation between the model and third-party tools

- Support for user-generated model templates

- Ready-made project examples and online tutorials

- Completely free to download and free to use

@nav{ce_qmc,license}
*/

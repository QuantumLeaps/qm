/*! @page ui User Interface
@nav{gs_exa,ui_mvc}

@section ui_overview Overview
The QM&trade; user interface consists of **dock windows and toolbars** that surround the @ref ui_mdi (MDI) area in the center. Dock windows and toolbars can be docked to the edges of the MDI area or floated as independent windows.

<div style="clear:both;"></div>

@image html dock_windows.png "QM&trade; Graphical User Interface"

@note
QM&trade; **remembers** the last used layout of all dock windows and toolbars and restores them next time the application is run.

The main elements of the QM&trade; graphical user interface are as follows:

- @subpage ui_mvc explains the Model-View-Controller architecture underlying the QM modeling tool.

- @subpage ui_dock shows how to adjust the Dock Windows and Toolbars to best suit your screen layout (including using multiple monitors). Also, you will see how to @ref ui_docs_show "show and hide" Dock Windows and Toolbars.

- @subpage ui_mdi shows diagrams and file-templates as separate windows. These windows can be either overlapping (in the @ref ui_mdi_subwindows) or tabbed (in the @ref ui_mdi_tabs);

- @subpage ui_model_file shows how QM stores the abstract Model between sessions.

- @subpage ui_session_file explains how QM stores the graphical layout and model-specific information (such as external tools and license type) between sessions.

- @subpage ui_license_cert explains what the QM license certificate file is, what it enables, and how to obtain it.

- @subpage ui_curr_item explains the important concept of the **Current Item**

- @subpage ui_explorer dock window shows all QM&trade; model items in a hierarchical tree view. This is the most holistic view of the model;

- @subpage ui_search dock window shows a search box and another hierarchical tree view of the model, which allows you to select the model item for searching. This second tree view can also be useful for a user-selected view of items that does **not** follow the @ref ui_curr_item;

- @subpage ui_prop dock window shows properties associated with @ref ui_curr_item and allows you to edit these properties;

- @subpage ui_toolbox contains the tools for creating new items specific to the current diagram type;

- @subpage ui_birds-eye shows a zoomed-out view of the current diagram;

- @subpage ui_log shows the information from code generation, external tool execution, and specific information about selected model elements (such as all triggers handled by a given state);

- @subpage ui_menus provide access to all commands;

- @subpage ui_toolbars provide quick access to the frequently used commands;

- @subpage ui_status provides status information, quick help, and zoom slider;

- @subpage ui_new-dlg is used to create a new model;

- @subpage ui_tools-dlg is used to configure external tools that you can integrate with QM&trade;

- @subpage ui_license-dlg is used to choose the code generation license

Additionally customizing the fonts and colors in QM&trade; is covered in the section:

- @subpage ui_custom.


@nav{gs_exa,ui_mvc}
*/
/*##########################################################################*/
/*!
@page ui_mvc Model-View-Controller
@nav{ui,ui_dock}

<p>Like most modeling tools, QM&trade; is based on the <a class="extern" target="_blank" href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model-View-Controller</a> architecture.
</p>

@image html mvc.png "Model-View-Controller Architecture of QM&trade;"


@section ui_mvc_model Model
At the center of the system is an @ref bm_model "abstract hierarchical model" of your software system. This model is kept entirely in memory and can be accessed very quickly. The abstract model is persisted in a @ref ui_model_file "Model File" (file with extension `.qm`), which uses the <a class="extern" target="_blank" href="http://en.wikipedia.org/wiki/XML">XML</a> data format. By using @ref bm_package-extern "external packages" you can also store the model into **multiple files** (package files with extension `.qmp`).


@section ui_mvc_views Views
The visible components of the QM&trade; user interface provide different **views** of the model. For example, the @ref ui_explorer provides the most comprehensive view of the whole model. Other GUI components provide the view of a specific item (see @ref ui_curr_item) or groups of related items (such as states and transitions in a diagram). The views are not just for viewing the model. You can also use them to **change** the model. For example, you can use the @ref ui_explorer to add, remove, or re-order the items. You can also change @ref bm_diagram "diagrams" by adding, removing, or re-arranging states and transitions. (NOTE: You always work with the **same** abstract model, regardless which view you are using.)


@section ui_mvc_ctrl Controller
This is the internal logic built into the QM&trade; tool that coordinates which parts of the model are displayed by the views and which parts of the model are updated from the views. The effective controller function requires a lot of internal knowledge about all the model items. For example, QM&trade; "knows" all the rules of state nesting, rules for attaching transitions, choice-segments, etc. in the @ref sm "state diagrams".

@nav{ui,ui_dock}
*/
/*##########################################################################*/
/*!
@page ui_dock Working with Dock Windows
@nav{ui_mvc,ui_mdi}

<p>Every dock window has its own title bar, even when it is docked. You can move dock windows from one dock area to another by dragging the **title bar**. You can dock more than one dock window in a given dock area, in which case they will stack on top of each other and will be accessible via tabs. You can also dock windows side-by-side.
</p>

You can also detach a dock window or a toolbar from the dock area and let it **float** as an independent window by dragging the dock window or the toolbar outside any dock area.

Floating dock windows or toolbars are always "on top" of their main window. You can also **hide** a dock window by clicking the <span class="button">X</span> button in the window's title bar.

@image html ui_dock.gif "Adjusting Dock Windows"


@attention
The QM&trade; application **saves** the exact arrangement of the dock windows and toolbars in the MDI area, and will restore it next time the application is run. <span class="highlight">See the next section if you "lose" a dock window and want to show it again</span>.



@section ui_docs_show Showing/Hiding Docks &amp; Toolbars
Any dock window can be shown or hidden by means of the @ref ui_toolbar_view or the @ref ui_menu_view. Additionally, the <span class="menu">View</span> menu also allows you to show or hide all toolbars and the status bar.

@image html tb_view.png "&quot;View&quot; toolbar"
@image html menu_view_docks.png "&quot;View&quot; menu"

@nav{ui_mvc,ui_mdi}
*/
/*##########################################################################*/
/*!
@page ui_mdi Multiple Document Interface
@nav{ui_dock,ui_model_file}

<p>The Multiple Document Interface (**MDI**) area in the center of the QM&trade; user interface shows diagrams and files (file templates). The MDI area can be set up to operate in two view modes: **Subwindows** and **Tabs**. In both modes you can also choose to view the windows-tabs along the top of the MDI area by selecting the <span class="checkbox">Window-&gt;Show Tabs</span> menu
</p>

@attention
The QM&trade; application **saves** the most recently used MDI view mode as well as the exact arrangement of the windows in the MDI area, and will restore it next time the application is run.

<div style="clear:both;"></div>


@section ui_mdi_subwindows Subwindows View
The **Subwindows** mode is activated with the <span class="checkbox">Window-&gt;Show Subwindows</span> menu. In this mode you can view and resize individual subwindows. You can also tile and cascade the subwindows. The Subwindows mode is ideal for comparing diagrams or files side-by-side.

@image html subwindows.jpg "Subwindows View"


@section ui_mdi_tabs Tabs View
The **Tabs** mode is activated with the <span class="checkbox">Window-&gt;Show Tabs</span> menu. The Tabs view mode is useful to avoid clutter and maximize the viewable area of the MDI window (with no window title and window borders obscuring your view). The tabs allow quick and easy access to any open MDI window. However, you can see only one MDI window at a time, so it is not possible to compare MDI windows side-by-side.

@image html tabs.jpg "Tabs View"

@nav{ui_dock,ui_model_file}
*/
/*##########################################################################*/
/*! @page ui_model_file QM Model File
@nav{ui_mdi,ui_session_file}

<p>The @ref bm_model is saved between sessions to a **QM model file** (or to multiple **model files**, if you use @ref bm_package-extern). The QM&trade; model file has the default extension `.qm`.
</p>

@note
This section describes the basic format of a *QM model file* as it is stored on disk. Please refer to the Section @ref bm_model "QM Model" for information about the *logical structure* of the QM model, as it is presented to the user during a QM session.

@image html bm_model-file.png "QM Model File on Disk"

@attention
Even though the model file and the package files are in principle human readable, you should <strong>not</strong> modify them in a general-purpose text editor or an XML editor, because you might break the internal cross-model references embedded into the XML (e.g., a reference from a class to its superclass). Any changes to the model files should be done exclusively by the QM&trade; modeling tool and therefore, to prevent inadvertent modifications, the QM&trade; Model File is saved as <span class="highlight"><strong>read-only</strong>.
</span>


@section ui_model_xml QM File XML Format
The *QM model file* is saved in the <a class="extern" target="_blank" href="http://www.w3.org/XML">eXtensible Markup Language (XML)</a> data format. The *QM package files* (if external packages are used) are also saved in the XML format. The advantage of using XML is that it is a textual format and can be conveniently handled by any <a class="extern" target="_blank" href="http://en.wikipedia.org/wiki/Revision_control">Version Control System (VCS)</a>.

@image html bm_model-xml.png "QM Model File Viewed in an XML Editor"


@subsection ui_model_links Model Link Comments
Starting from version 4.0.0, QM allows you to save *model files* with special comments that contain @ref bm_fq-name "Fully Qualified Item Names". This feature is controlled by the **save links** property of the @ref bm_model_prop "Model Property Sheet".

The primary usage scenario for this feature is as follows: you have two versions of the same model (e.g., created by two developers working independently, or just two versions created at different times). You can use any text-differencing tool (e.g., <a href="http://winmerge.org/" target="_blank" class="extern">WinMerge</a>) to difference the two model files in XML side-by-side. In such views, you can very easily see both the differences and the model-links.

@image html bm_model-diff.png "Side-by-side differencing of QM model files"

The model-link comments obviously take some additional space in the XML file, but the benefit of having them is that you can easily copy the comment just preceding the difference to the Clipboard (Ctrl-C) and then click on the QM tool and "Paste the Link" (F5). This opens the model element where your models differ. From there, you can typically resolve the merge conflict quite easily <span class="highlight"><strong>within QM</strong></span>. If you go systematically through all your differences in XML model files, you can be sure that you have addressed all the differences. You need to try it in practice to appreciate the method.

@attention
You should <span class="highlight"><strong>never</strong></span> edit your XML model files "manually" outside the QM modeling tool


@section ui_model_backup Automatic QM File Backup
QM can make automatic backups of the *QM model file* as well as the *QM Package Files* (if used). This option is enabled by the checkbox in the @ref ui_menu_file "File Menu".

@image html qm_backups.png "Create Backups option in the File Menu"

When "Create Backups" is enabled, QM will save the *previous* version of the model into the file `<model>.bak` before saving the model into a new file `<model>.qm`.

@note
QM creates only **one level** of model backups. The model backup file `<model>.bak` gets **overwritten** the second and subsequent times the model is saved.

@nav{ui_mdi,ui_session_file}
*/
/*##########################################################################*/
/*! @page ui_session_file QM Session File
@nav{ui_model_file,ui_license_cert}

<p>The **QM Session File** stores the QM settings used in the most recent modeling session. The QM Session File is specific to the QM model used and therefore it is stored in the same directory as the most recent @ref ui_model_file "Model File". The QM Session File is named as `.`&lt;`model-name`&gt;. For example, the QM Session File for a model named `my_model` will be named `.my_model` (dot-my_model) and saved in the same directory as the @ref ui_model_file `my_model.qm`.
</p>

@image html bm_session-file.png "QM Session File in the Model Directory"

The QM Session File contains the following information:

- The code generation license associated with the model (see also @ref ui_license-dlg and @ref ce_comment)

- The locked status of model items (see @ref bm_lock "Locking Model Items")

- The geometry of the most recently opened @ref ui_mdi "MDI windows" (@ref bm_diagram "Diagrams" and @ref ce_file "Files")

- The most recently used @ref bm_search "Search Options"

- The @ref ui_tools-dlg "External Tools" configured for the model.


@note
The QM Session File is saved in the @ref ui_model_file "Model File" directory. This allows each model to have its **own** external tools and use the QP framework under different licensing terms than other models on the same machine.

@attention
The QM Session File saved on disk should <strong>not</strong> be edited manually outside the QM&trade; tool. Therefore, to prevent inadvertent modifications, the QM Session File is saved as <span class="highlight"><strong>read-only</strong></span>.

@nav{ui_model_file,ui_license_cert}
*/
/*##########################################################################*/
/*! @page ui_license_cert QM License Certificate File
@nav{ui_session_file,ui_curr_item}

<p>Every QP commercial license comes with the **QM License Certificate file**, which stores the @ref ab_gen_code "commercial license information" for the QM code generator. The QM License Certificate file is always named exactly the same as the corresponding commercial license. For example, a commercial license with the license number `QPC-SP-221115A` will be accompanied by the license file named `QPC-SP-221115A.qlc` (extension `.qlc`).
</p>

The QM License Certificate file is specific to the commercially licensed <a href="https://www.state-machine.com/licensing#Commercial" target="_blank" class="extern">QP framework</a> type and therefore it is highly recommended to store it in the directory where you installed QP. For example, if you installed the <a href="https://www.state-machine.com/qpc">QP/C framework</a> in the directory `C:\qp\qpc`, you should copy your QM License Certificate file to this directory as well.

@note
If you are a commercial licensee and for some reason you did not receive your QM License Certificate file, please send email with your license number to <a href="mailto:support@state-machine.com">support@state-machine.com</a> to request your copy.


@section ui_license_cont Contents of QM License Certificate File
The QM License Certificate file is a plain-text file, which you can open in any editor and inspect (but you cannot change without corrupting it). Here is an example of a QM License Certificate file:

@include "QPC-SP-221115A.qlc"

The QM License Certificate file the following information:

- The name of the commercial Licensee (company or individual)
- The licensed QP framework type(s) (qpc/qpcpp)
- The expiration date of the <a href="https://www.state-machine.com/licensing/#Support" target="_blank" class="extern">Support Term</a> associated with the license
- The licensed <a href="https://www.state-machine.com/licensing/#Commercial" target="_blank" class="extern">Single Product / Product Line/etc.</a> of the Licensee
- The cryptographic hash over the contents of the file, which prevents tampering with it.


@section ui_license_reg Registering QM License Certificate
The QM License Certificate file must be registered in QM by means of the @ref ui_license-dlg "Code Generation License Dialog Box". The file is specific to the model file, and different models can have different QM License Certificates associated with them. In other words, you can have multiple QM License Certificates present on your machine, associated with your various models (e.g., License Certificates for different Single Products of your Company).

@image html license_com-dlg.png "Code Generation License Dialog (Commercial License)"


@section ui_license_code Generated Code
After registering the QM License Certificate, the QM tool will generate @ref ce_comment-file "top-level file comments" with the commercial license information.

The following code snippet shows the top-level file comment generated from the QM license certificate example discussed above.

@include "egizmo.c"

@note
The top-level comments generated with a registered QM License Certificate contain no references to any open-source license because the code will be proprietary.

@nav{ui_session_file,ui_curr_item}
*/
/*##########################################################################*/
/*! @page ui_curr_item Current Item
@nav{ui_license_cert,ui_explorer}

<p>In QM&trade; you always work with just one model item at a time, which is called the <strong>Current Item</strong>. All views of the model, such as the @ref ui_explorer, the @ref ui_prop, and the active @ref bm_diagram "Diagrams", highlight the **same** Current Item, as illustrated below:
</p>

<div style="clear:both;"></div>

@image html curr_item.jpg "The Current Item"

@note
The Current Item is typically also the **Selected Item** in the active diagram. However, it is also possible to select **multiple items** in a diagram or, by toggling selections, to end up de-selecting the Current Item (see section @ref bm_diagram_shape_select). Therefore, the Selected Items in a diagram should not be confused with the Current Item, which is always highlighted in the @ref ui_explorer and shown in the @ref ui_prop.

@nav{ui_license_cert,ui_explorer}
*/
/*##########################################################################*/
/*! @page ui_explorer Model Explorer
@nav{ui_curr_item,ui_search}

<p>The **Model Explorer** dock window provides the most holistic view of the QM&trade; model as it contains **all** model items in a hierarchical tree-like structure, reflecting the arrangement of the items within the model. The Model Explorer dock window can be shown or hidden by means of the <span class="menu">View->Model Explorer</span> menu or the @ref ui_toolbar_view :
</p>

<div style="clear:both;"></div>

@image html view_explorer.png "Showing/Hiding the Model Explorer Dock Window"


At the top-most level, the Model Explorer typically displays: the <span class="img model">@ref bm_model "Model Item"</span>, the <span class="img qp_framework"><a href="https://www.state-machine.com/products" target="_blank" class="extern">QP framework</a></span> (`qpc`, `qpcpp`, or `qpn`), various <span class="img package">@ref bm_package "packages"</span>, and <span class="img directory">@ref ce_dir "directories"</span>.


@image html explorer.png "Model Explorer Dock Window"


You can use the Model Explorer to:

- Set any item as the @ref ui_curr_item by clicking on it in the Explorer;

- Expand model items to show the nested items by clicking on the <span class="img plus">plus</span> handle;

- Collapse model items to hide the nested items by clicking on the <span class="img minus">minus</span> handle;

- @ref ui_explorer_reorder "Reorder model items" by means of the <span class="img move_up">Up</span> and <span class="img move_down">Down</span> buttons;

- @ref ui_explorer_delete "Delete model items" by means of the <span class="img delete">Delete</span> button;

- @ref ui_explorer_drag-model "Drag and drop" model items within the Model Explorer;

- @ref ui_explorer_drag-code "Drag and drop" model items for code generation;

- @ref ui_explorer_popup "Execute item-specific actions" by means of the item-specific popup-menu;

- @ref ui_explorer_default "Execute the item-specific default action" by double-clicking on the item;

@attention
<span class="highlight">Any changes to the model are only allowed for items that are @ref bm_lock "unlocked" for editing (<span class="img unlock"></span>)</span>.


@section ui_explorer_reorder Reordering Model Items
The order of items within the model has important consequences for code generation and QM&trade; honors the specific order as much as possible. For example, the class attributes, operations, parameters, etc. as well as states, transitions, and guard conditions within a state machine will appear in the generated code exactly in the order specified in the model.

The Model Explorer provides two ways to reorder items within the model:

<img src="img/explorer_up-down.png" style="float:left; margin-right:10px;">The @ref ui_curr_item can be moved up or down within the Model Explorer by means of the <span class="img move_up">Up</span> and <span class="img move_down">Down</span> buttons on the Explorer Toolbar.

<img src="img/keyboard.png" style="float:left; margin-right:10px;">Alternatively, the @ref ui_curr_item can be moved up or down within the Model Explorer by means of the keyboard shortcuts: **Ctrl**-<span class="img key_up">(key-up)</span> and **Ctrl**-<span class="img key_down">(key-down)</span>.

@note
To facilitate better organization of the model and faster navigation within the model, the QM&trade; tool uses a pre-defined ordering of model items within high-level container items, such as @ref bm_package "Packages", @ref bm_class "Classes", @ref sm "State Machines" and @ref ce_dir "Directories". For example, class attribute items are always ordered before the operation items. To enforce this ordering, the actions of moving an item up or down might be **disabled** (grayed out). In this case, you will not be able to move the item in the disallowed direction and the corresponding keyboard shortcut will be disabled as well.


@section ui_explorer_delete Deleting Model Items
The Model Explorer provides two ways to delete an item from the model:

<img src="img/explorer_delete.png" style="float:left; margin-right:10px;">The @ref ui_curr_item can be deleted from the model by means of the <span class="img delete">Delete</span> button on the Explorer Toolbar.

<img src="img/keyboard.png" style="float:left; margin-right:10px;">Alternatively, the @ref ui_curr_item can be deleted from the model by means of the <span class="button">Delete</span> keyboard shortcut.


@section ui_explorer_drag-model Drag-and-Drop within the Model Explorer
The Model Explorer supports drag-and-drop of model items within "container items", such as <span class="img package">packages</span>, <span class="img class">classes</span>, and <span class="img directory">directories</span>. Note that drag-n-drop is **not** meant for @ref ui_explorer_reorder "reordering model items". Instead the purpose of drag-n-drop is to change the nesting of a given item from one "container item" to another.

To drag an item from one container to another, click on the item within the Model Explorer and while holding the (left) mouse button drag it to another "container item" until the mouse cursor shows that dropping is allowed.

@image html ui_explorer_drag-item.gif "Drag-n-Drop within Model Explorer"

@note
Model Explorer "knows" which items can be accepted by which "container item" and will not allow drops on the inappropriate containers (e.g., a directory cannot hold a class). When dropping of a given item is not allowed, the mouse cursor changes to <span class="img forbidden"></span>.


@section ui_explorer_drag-code Drag-and-Drop into Files
The Model Explorer supports drag-and-drop of model items to @ref ce_file "File Windows" to create @ref bm_fq-name "Fully-Qualified Item Names" inside @ref ce_directive.

@image html "ui_explorer_drag-link.gif" "Dragging a link to a File"

To drag an item to a @ref ce_file "file", click on the item within the Model Explorer and while holding the (left) mouse button drag it to an open file until the mouse cursor shows that dropping is allowed.


@section ui_explorer_popup Item-Specific Popup Menus

@image html explorer_popup.png "Item-Specific Popup Menu"

By **right-clicking** on any item in the Model Explorer you can open the item-specific **popup menu**, through which you can additionally:

- @ref bm_lock "Lock/Unlock Model Items" for editing;

- Add new items to the @ref ui_curr_item. For example, you can add a new class to a package;

- Import packages (see also @ref bm_package);

- Display diagram items (see also @ref bm_diagram);

- Generate code for the item (see also @ref ce);

- @ref bm_cut-paste model items (see also @ref bm_cut-paste);

- Delete model items.


@section ui_explorer_default Item-Specific Default Actions

By **double-clicking** on an item in the Explorer you can execute its **default action**. The default action for all model items is to expand the item if it is collapsed, and collapse it if it was expanded. Additionally, the default action for diagram and file-template items is to display the diagram or file in the @ref ui_mdi.

@note
The default action never causes any changes in the model and is always **safe to execute**.


@sa @ref ui_docs_show

@nav{ui_curr_item,ui_search}
*/
/*##########################################################################*/
/*! @page ui_search Model Search
@nav{ui_explorer,ui_prop}

<p>The **Model Search** dock window enables you to perform textual search (and also replace) of a selected part of the  QM&trade; model. To allow you access to any part of the model, the search dock contains the hierarchical-tree view of the model, similar to the @ref ui_explorer, but it provides quite different functionality and you should <span class="highlight">not confuse the two</span>. The Model Search dock window can be shown or hidden by means of the <span class="menu">View->Search</span> menu or the @ref ui_toolbar_view :
</p>

<div style="clear:both;"></div>

@image html view_search.png "Showing/Hiding the Search Dock Window"


@note
To avoid confusing **Model Search** with @ref ui_explorer, QM&trade; uses a different color scheme for these two views.

@image html ui_search.png "Model Search Dock Window"


The Model Search view consists of the **Search Box** at the top, where you can type the search string, and a couple of buttons. The **Search Button** to the right performs a one-time search of the next occurrence of the search string. The **Search Options** drop-down arrow shows a popup-menu of search options (e.g., non-recursive search, context-sensitivity, etc.). Finally, the **Replace Button** opens the Replace Box, where you can type a replacement string.

The tree view below the Search Box is for selecting the **Search Item**, which narrows-down the scope of the search. The tree view also shows the **Current Item**, which is the model item with the last occurrence of the search string.

@attention
<span class="highlight">Please refer to the Section @ref bm_search for more information about search and replace.</span>

@nav{ui_explorer,ui_prop}
*/
/*##########################################################################*/
/*! @page ui_prop Property Editor
@nav{ui_search,ui_toolbox}

<p>The Property Editor dock window contains the **Property Sheet**, which is specific to the type of the @ref ui_curr_item "Current Item" and enables you to modify any **textual** properties of the Current Item, such as its *name*, *documentation*, *code*, etc. The Property Editor dock window can be shown or hidden by means of the <span class="menu">View->Property Editor</span> menu or through the @ref ui_toolbar_view :
</p>

<div style="clear:both;"></div>

@image html view_prop.png "Showing/Hiding the Property Editor Dock Window"
<br>

@image html ui_prop.png "Property Editor Dock Window"


@section ui_prop_update Model Updates from Property Editor
For performance reasons, the changes you make in the Property Editor are **not** introduced into the @ref bm_model "Abstract Model" immediately, so, for example, the model is generally *not* updated after every key-press on your keyboard. Instead the Property Editor updates the model after the following events:

- you switch from one edit box to another in a Property Sheet
- you press the <span class="button">Enter</span> key inside a single-line edit box
- you click outside the Property Editor
- you activate any keyboard shortcut (e.g., <span class="button">F7</span> for @ref ce "code generation")
- you change the @ref ui_curr_item "Current Item"


@section ui_prop_example Property Sheet Example
The screen shot below shows an example of a Property Sheet of the @ref sm_state "State" item. This Property Sheet illustrates the typical properties:

@image html "ui_prop_state.png" "Property Sheet Example (State)"

- **name** text property
- **superstate** drop-down list property
- **documentation** text property (NOTE: can be <span class="img collapse"></span> collapsed or <span class="img expand"></span> expanded by means of the provided button)
- **entry** text property consisting of two parts: the pseudocode next to the property and and the action code below
- **exit** text property consisting of two parts: the pseudocode next to the property and and the action code below.


@section ui_prop_spec Specific Property Sheets
The specific Property Sheets are documented with the model items to which they correspond:

- @ref bm_model_prop "Model Property Sheet"
- @ref bm_package_prop "Package Property Sheet"
- @ref bm_class_prop " Class Property Sheet"
- @ref sm_state_prop "State Property Sheet"
- @ref ce_dir_prop "Directory Property Sheet"
- @ref ce_file_prop "File Property Sheet"

@nav{ui_search,ui_toolbox}
*/
/*##########################################################################*/
/*! @page ui_toolbox Diagram Toolbox
@nav{ui_prop,ui_birds-eye}

<p>The Diagram Toolbox is a special toolbar containing a collection of tools for **adding** new shapes to the active diagram. The Diagram Toolbox is typically docked along the right edge of the QM&trade; main window, but it can be @ref ui_dock "docked" at any location allowed for a toolbar. You can also @ref ui_dock "float" the Diagram Toolbox. The Diagram Toolbox can be shown or hidden by means of the <span class="menu">View->Draw Toolbox</span> menu or the @ref ui_toolbar_view :
</p>

@image html view_toolbox.png "Showing/Hiding the Diagram Toolbox"
<br>

@note
The Diagram Toolbox is **enabled** only when a state diagram is the active MDI window and the model is @ref bm_lock "unlocked" (<span class="img unlock"></span>). If the Toolbox is <span class="highlight">invisible</span>, you need to show it within the <span class="menu"> View-&gt;Draw Toolbar</span> menu.

<div style="clear:both;"></div>

@image html ui_toolbox.png "Diagram Toolbox for a State Diagram (left) and when no diagram is active (right)"

The diagram-specific tools displayed in the Diagram Toolbox depend on the active diagram type. Currently, QM&trade; supports only state diagrams, so you will see only the state diagram tools in the Diagram Toolbox, but other sets of tools for diagrams of different types can be supported in the future.


@section ui_toolbox_select The Select Tool
Regardless of the diagram type, the Diagram Toolbox always displays the <span class="img select">Select Tool</span> at the top, which is the default tool. The **Select Tool** allows you to select shapes and manipulate them (move and resize). The Select Tool also allows @ref bm_diagram_pan "panning" the diagram as well as @ref bm_diagram_shape_select "selecting" groups of shapes with the lasso. The **Select Tool** automatically becomes the current tool after you apply any other tool from the Toolbox.


@section ui_toolbox_usig Using the Tools
The diagram-specific tools are used as follows:

- First, you select the tool from the Diagram Toolbox by clicking on it. <span class="highlight">Note that you do **not** drag a tool to the diagram</span>. You simply click on the tool and release the mouse button. At this point, the tool appears "selected" (it looks like a depressed button).

- Next, you move the cursor to the active diagram. As you hover the cursor over the diagram, the cursor changes, informing you where in the diagram it is legal to add the new shape. The cursor has a <span class="img forbidden">forbidden</span> annotation if this particular shape is not allowed at a given spot.

- Finally, when you hover over a diagram area where it is allowed to add a specific shape, you click the mouse and start dragging the shape. What happens next depends on the type of the shape. For example, if it is a node (such as a @ref sm_state "state"), you can drag the bottom-right corner of the shape to make it a desired size. If it is a connector (such as a @ref sm_tran "transition"), you can drag the other end of the shape to connect it to the desired node.


@sa
  @ref sm_toolbox <br>
  @ref bm_diagram <br>
  @ref ui_docs_show

@nav{ui_prop,ui_birds-eye}
*/
/*##########################################################################*/
/*! @page ui_birds-eye Bird's Eye View
@nav{ui_toolbox,ui_log}

<p>The **Bird's Eye View** provides a zoomed-out view of the active diagram. It enables you to orient yourself quickly around large diagrams. The Bird's Eye View dock window can be shown or hidden by means of the <span class="menu">View->Bird's Eye View</span> menu or the @ref ui_toolbar_view :
</p>

<div style="clear:both;"></div>

@image html view_bird.png "Showing/Hiding the Bird's Eye View Dock Window"
<br>

@image html birds_eye.png "Bird's Eye View"


@section ui_birds-eye_pan Panning the Viewport
The highlighted box in the Bird's Eye View represents the viewed area on the open diagram called the **viewport**. You can pan the viewport by dragging it around the Bird's Eye View with the mouse. The corresponding active diagram will then reflect the fragment of the diagram visible through the viewport.

@sa
@ref bm_diagram_pan and @ref bm_diagram_scroll

@nav{ui_toolbox,ui_log}
*/
/*##########################################################################*/
/*! @page ui_log Log Console
@nav{ui_birds-eye,ui_menus}

<p>The Log Console @ref ui_dock "dock window" shows the textual output from code generation, external tool execution, and specific information about selected model elements (such as all triggers handled by a given state). The Model Explorer dock window can be shown or hidden by means of the <span class="menu">View->Log Console</span> menu or the @ref ui_toolbar_view :
</p>

<div style="clear:both;"></div>

@image html view_log.png "Showing/Hiding the Log Console Window"
<br>

@image html log.png "Log Console Dock Window"


The log console is **read-only**, but you can select any part of the text and copy it to the Clipboard.


@section ui_log-menu Popup Menu
The Log Console provides a pop-up menu, which you activate by **right-clicking** anywhere inside the text area.

@image html log_menu.png "Log Console's Popup Menu"

The available options are as follows:

- **Copy** allows you to copy the selected text into the Clipboard (only enabled when there is a selection)

- **Select All** allows you to select all the text in the Log Console

- **Wrap Lines** is a toggle, which allows you to either wrap the lines to fit the text in the available width of the Log Console, or not to wrap the lines and use the horizontal scroll, if some lines exceed the width of the Log Console

- **Clear All** allows you to clear the Log Console.


@section ui_log-error Locating Erroneous Items
 The QM&trade; @ref ce "code generator" might report errors to the Log Console. Typically, an error message pertains to a specific model item. In that case, the Error Console allows you to quickly navigate to the erroneous item by **double-clicking** on the error message. For example, the screen shot below shows an error message associated with a state item. Double-clicking on the line with the error message opens the corresponding @ref sm "state machine" and locates the erroneous state.

@image html log_error.png "Locating Erroneous Item"


@section ui_log-tools Output from External Tools
The Log Console also displays output from any @ref ui_tools-dlg "External Tools" that you invoke directly from QM&trade; (such as make, lint, unit tests, flash programmers, etc.)

For example, the following screen shot shows the output from a code upload to an embedded target. Please note that this example shows a "long-running" utility, which produces the output incrementally as the code is being uploaded and programmed to the flash memory of the embedded MCU.

@image html log_tool.png "Output from an External Tool"

@note
In case of the tool failure, the Log Console will show the error status. But, if you checked the @ref ui_tools-dlg_errors "Show error message box after failure" check box in the @ref ui_tools-dlg, you will get an additional alert in form of a message box, which can be useful for unit testing.


@section ui_log-signals Listing State Signals
The Log Console also can display additional information about the model, such as all signals handled by a state in a @webref{fsm#HSM,Hierarchical State Machine (HSM)}.

@image html log_signals.png "List of Signals Handled by a State"

@note
In a HSM, a state "inherits" signals from all its @ref sm_state_nest "superstates", so it might not be readily apparent which signals are handled).

<br>ext{ui_menus}
*/
/*##########################################################################*/
/*! @page ui_menus Menus
@nav{ui_log,ui_toolbars}

@section ui_menu_file File Menu

@image html menu_file.png "File menu"

<table summary="" cellpadding="2" cellspacing="0" >
  <tr >
    <td width="25"><img class="left" alt="" src="img/new_model.png"/></td>
    <td width="95"> **New Model...** </td>
    <td>opens the @ref ui_new-dlg dialog.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/open.png"/></td>
    <td> **Open Model...** </td>
    <td>opens the "Open Model File" dialog.</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/save.png"/></td>
    <td> **Save Model** </td>
    <td>saves the current model. <span class="highlight">Disabled if the model file is up to date</span>.</td>
  </tr>
  <tr>
    <td></td>
    <td> **Save Model As...** </td>
    <td>opens the "Save Model As" dialog and saves the model to the selected file, typically under a different name.</td>
  </tr>
  <tr>
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **Create Backups** </td>
    <td>see @ref ui_model_backup "Automatically Create Model Backups"</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/export_svg.png"/></td>
    <td> **Export Diagram...** </td>
    <td>opens a file save dialog "Export diagram as SVG" and exports the current diagram in the Enhanced Windows Metafile vector format. <span class="highlight">Disabled if no diagram is currently active</span>.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/print.png"/></td>
    <td> **Print File...** </td>
    <td>opens the "Print" dialog to print the active file or diagram. <span class="highlight">Disabled if no file or diagram is active</span>.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr>
    <td></td>
    <td> **Recent Models** </td>
    <td>Opens a sub-menu with the list of most recent model files.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr>
    <td></td>
    <td> **Exit** </td>
    <td>Exits the application.</td>
  </tr>
</table>


@subsection ui_menu_file-recent Recent Models Sub-Menu

@image html menu_file-recent.png "Recent Models sub-menu"

<table summary="" cellpadding="2" cellspacing="0" >
  <tr>
    <td width="25"><img class="left" alt="" src="img/model.png"/></td>
    <td width="95"><strong>&lt;model-file&gt;</strong></td>
    <td>opens the most recently used model. <span class="highlight">QM&trade; remembers up to 15 most recently used model files</span>.</td>
  </tr>
</table>


@section ui_menu_edit Edit Menu
@image html menu_edit.png "Edit menu"

<table summary="" cellpadding="2" cellspacing="0" >
  <tr >
    <td width="25"><img class="left" alt="" src="img/undo.png"/></td>
    <td width="95"> **Undo** </td>
    <td>performs undo of the last model edit (see @ref bm_undo-redo)</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/redo.png"/></td>
    <td> **Redo** </td>
    <td>performs redo of the last model edit (see @ref bm_undo-redo)</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr  >
    <td><img class="left" alt="" src="img/cut.png"/></td>
    <td> **Cut** </td>
    <td>deletes the selected text or model item and places it in the Clipboard.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/copy.png"/></td>
    <td> **Copy** </td>
    <td>copies the selected text or model item into the Clipboard</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/paste.png"/></td>
    <td> **Paste** </td>
    <td>pastes the content of the Clipboard to the current model editor (file, diagram, or property sheet). <span class="highlight">Disabled if clipboard has no data or the data is in a format incompatible with the current view.</span>.</td>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/copy_diagram.png"/></td>
    <td> **Copy diagram** </td>
    <td>copies the **selected elements** of the current diagram to the Clipboard in the ScalaSerachble Vector Graphics (SVG) format. If no elements are selected the whole diagram is saved in the Clipboard. <span class="highlight">Disabled if no diagram is currently active</span>.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/copy_link.png"/></td>
    <td> **Copy Link** </td>
    <td>copies a link to the @ref ui_curr_item to the Clipboard.</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/paste_link.png"/></td>
    <td> **Paste Link** </td>
    <td>selects a new @ref ui_curr_item based on the model-link stored in the Clipboard. <span class="highlight">Disabled if the Clipboard does not hold a valid item link</span>.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/lock.png"/></td>
    <td> **Lock** </td>
    <td>Locks the @ref ui_curr_item from editing. <span class="highlight">Disabled if the current item cannot be locked</span>.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/unlock.png"/></td>
    <td> **Unlock** </td>
    <td>Unlocks the @ref ui_curr_item for editing. <span class="highlight">Disabled if the current item cannot be unlocked</span>.</td>
  </tr>
</table>


@section ui_menu_view View Menu
@image html menu_view.png "View menu"

<table summary="" cellpadding="2" cellspacing="0" >
  <tr >
    <td width="25"></td>
    <td width="95"> **Style** </td>
    <td>selects the style of the QM&trade; user interface from the submenu. <span class="highlight">The selected style takes effect only **after** restarting QM&trade;</span>.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/explorer.png"/></td>
    <td> **Explorer** </td>
    <td>shows (when checked) or hides the @ref ui_explorer dock window</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/find.png"/></td>
    <td> **Search** </td>
    <td>shows (when checked) or hides the @ref ui_search dock window</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/property.png"/></td>
    <td> **Property Editor** </td>
    <td>shows (when checked) or hides the @ref ui_prop dock window</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/birdseye_view.png"/></td>
    <td> **Bird's Eye View** </td>
    <td>shows (when checked) or hides the @ref ui_birds-eye dock window</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/log.png"/></td>
    <td> **Log** </td>
    <td>shows (when checked) or hides the @ref ui_log dock window</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/toolbox.png"/></td>
    <td> **Diagram Toolbox** </td>
    <td>shows (when checked) or hides the @ref ui_toolbox toolbar</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr>
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **File** </td>
    <td>shows (when checked) or hides the @ref ui_toolbar_file </td>
  </tr>
  <tr >
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **Edit** </td>
    <td>shows (when checked) or hides the @ref ui_toolbar_edit </td>
  </tr>
  <tr>
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **View** </td>
    <td>shows (when checked) or hides the @ref ui_toolbar_view </td>
  </tr>
  <tr >
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **Toolbox** </td>
    <td>shows (when checked) or hides the @ref ui_toolbox </td>
  </tr>
  <tr>
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **Status Bar** </td>
    <td>shows (when checked) or hides the @ref ui_status </td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/grid3.png"/></td>
    <td> **Grid Options** </td>
    <td>offers four grid styles for diagrams, including no grid.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/zoom_out.png"/></td>
    <td> **Zoom Out** </td>
    <td>zooms out (makes smaller) the current diagram. <span class="highlight">Disabled if no diagram is currently active</span>.</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/zoom_in.png"/></td>
    <td> **Zoom In** </td>
    <td>zooms in (makes larger) the current diagram. <span class="highlight">Disabled if no diagram is currently active</span>.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/zoom_100.png"/></td>
    <td> **Zoom to 100%** </td>
    <td>zooms the current diagram to 100% (1:1). <span class="highlight">Disabled if no diagram is currently active</span>.</td>
  </tr>
</table>


@section ui_menu_search Search Menu
@image html menu_search.png "Search menu"

<table summary="" cellpadding="2" cellspacing="0" >
  <tr >
    <td width="25"><img class="left" alt="" src="img/search.png"/></td>
    <td width="95"> **Find Next** </td>
    <td>Finds the next occurrence of the search string. <span class="highlight">Disabled if no search string selected, or the search item searched to the end.</span></td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr>
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **Match Case** </td>
    <td>When selected, case-sensitive matching will be applied. Otherwise, the matching will ignore the case</td>
  </tr>
  <tr>
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **Match Whole Words** </td>
    <td>When selected, only whole words (delimited by white space) will be matched.</td>
  </tr>
  <tr>
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **Match Exactly** </td>
    <td>When selected, only exact search strings will be matched.</td>
  </tr>
  <tr>
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **Search Recursively** </td>
    <td></td>
  </tr>
</table>


@section ui_menu_tools Tools Menu
The part of the Tools Menu with keyboard shortcuts <span class="button">F8</span>-<span class="button">F12</span> is customizable by means of the @ref ui_tools-dlg. The following screen shot shows just an example of the Tools Menu, which might look different in your system.

@image html menu_tools.png "Tools Menu (Example)"

<table summary="" cellpadding="2" cellspacing="0" >
  <tr >
    <td width="25"><img class="left" alt="" src="img/license_gpl.png"/></td>
    <td width="95"> **View/change License...** </td>
    <td>launches the @ref ui_license-dlg.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/codegen.png"/></td>
    <td> **Generate Code** </td>
    <td>generates code for all @ref ce_file "file-templates" in the model (see also @ref ce)</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/tool0.png"/></td>
    <td> **Tool 1** </td>
    <td>invokes an external tool #1 (see also @ref ui_tools-dlg)</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/tool1.png"/></td>
    <td> **Tool 2** </td>
    <td>invokes an external tool #2 (see also @ref ui_tools-dlg)</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/tool2.png"/></td>
    <td> **Tool 3** </td>
    <td>invokes an external tool #3 (see also @ref ui_tools-dlg)</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/tool3.png"/></td>
    <td> **Tool 4** </td>
    <td>invokes an external tool #4 (see also @ref ui_tools-dlg)</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/tool4.png"/></td>
    <td> **Tool 5** </td>
    <td>invokes an external tool #5 (see also @ref ui_tools-dlg)</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/tool_kill.png"/></td>
    <td> **Kill the Running Tool** </td>
    <td>terminates the process that is running the current tool. <span class="highlight">NOTE: enabled only when an external tool is running</span>. </td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/tool_manager.png"/></td>
    <td> **Manage External Tools** </td>
    <td>launches the @ref ui_tools-dlg</td>
  </tr>
</table>


@section menu_window Window Menu
@image html menu_window.png "Window menu"

<table summary="" cellpadding="2" cellspacing="0" >
  <tr >
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **Subwindows** </td>
    <td>selects (when checked) the Subwindows mode of the @ref ui_mdi area.</td>
  </tr>
  <tr>
    <td><span class="checkbox">&nbsp;</span></td>
    <td> **Tabs** </td>
    <td>selects (when checked) the Tabs mode of the @ref ui_mdi area.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/close_one.png"/></td>
    <td> **Close** </td>
    <td>closes the currently active MDI subwindow or a tab. <span class="highlight">Disabled if all MDI windows are closed</span>.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/close_all.png"/></td>
    <td> **Close All** </td>
    <td>closes all open MDI subwindows or tabs. <span class="highlight">Disabled if all MDI windows are closed</span>.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/tile.png"/></td>
    <td> **Tile** </td>
    <td>Tiles all open MDI subwindows. <span class="highlight">Disabled in the Tabs view or if all MDI windows are closed</span>.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/cascade.png"/></td>
    <td> **Cascade** </td>
    <td>Cascades all open MDI subwindows. <span class="highlight">Disabled in the Tabs view or if all MDI windows are closed</span>.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/next_window.png"/></td>
    <td> **Next** </td>
    <td>Activates the next MDI window. <span class="highlight">Disabled if all MDI windows are closed</span>.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/prev_window.png"/></td>
    <td> **Previous** </td>
    <td>Activates the previous MDI window. <span class="highlight">Disabled if all MDI windows are closed</span>.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><span class="radio">&nbsp;</span></td>
    <td> **window-title** </td>
    <td>activates the given MDI-window. <span class="highlight">This part of the Window menu lists all open MDI windows by window title.</span>.</td>
  </tr>
</table>


@section ui_menu_help Help Menu
@image html menu_help.png "Help menu"

<table summary="" cellpadding="2" cellspacing="0" >
  <tr>
    <td>&nbsp;</td>
    <td> **Help Location** </td>
    <td>Opens a sub-menu for location of the help. Options are: **Online Help**, which uses help from <a class="extern" target="_blank" href="https://www.state-machine.com/qm">state-machine.com/qm</a>, and **Offline Help**, which uses help from the local directory `<qm>/help` on your disk. (<span class="highlight"><strong>NOTE:</strong> the Online Help might contain a more complete, updated help than the local help</span>.)</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td width="25"><img class="left" alt="" src="img/help_contents.png"/></td>
    <td width="95"> **Help Contents** </td>
    <td>opens the default web browser at <a class="extern" target="_blank" href="https://www.state-machine.com/qm">state-machine.com/qm</a></td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/help_context.png"/></td>
    <td> **Help Context** </td>
    <td>opens the context-sensitive help in the default web browser. <span class="highlight">Context-sensitive help is really intended to be used via the shortcut Ctrl+<span class="button">F1</span>. You place your mouse pointer on any part of the QM&trade; user interface and press Ctrl+<span class="button">F1</span>. This opens the specific help page for the pointed element</span>.</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/home.png"/></td>
    <td> **QM Homepage** </td>
    <td>opens the default web browser at <a class="extern" target="_blank" href="https://www.state-machine.com/qm">state-machine.com/qm</a></td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/forum.png"/></td>
    <td> **Free Support Forum** </td>
    <td>opens the default web browser at <a class="extern" target="_blank" href="https://sourceforge.net/projects/qpc/forums/forum/668726">Free Support Forum</a></td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/license.png"/></td>
    <td> **QM License** </td>
    <td>shows a window with the text of the @ref license agreement.</td>
  </tr>
  <tr>
    <td colspan="2"><img src="img/div_hor.png"></td><td></td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/qm.png"/></td>
    <td> **About QM** </td>
    <td>shows information about QM&trade;, such as version, copyright, short description, and Qt commercial license number.</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/qt.png"/></td>
    <td> **About Qt** </td>
    <td>shows information about the Qt Toolkit, such as the current Qt version used by QM&trade; and the Qt licensing options.</td>
  </tr>
</table>

@nav{ui_log,ui_toolbars}
*/
/*##########################################################################*/
/*! @page ui_toolbars Toolbars
@nav{ui_menus,ui_status}

@section ui_toolbar_file File Toolbar
The File Toolbar provides quick access to actions of the @ref ui_menu_file. The File Toolbar is visible when the checkbox in the <span class="checkbox">&nbsp;View-&gt;File Toolbar&nbsp;</span> menu is checked.

<div style="clear:both;"></div>

@image html tb_file.png "File Toolbar"
<br>
<table summary="" cellpadding="2" cellspacing="0" >
  <tr>
    <td width="25"><img class="left" alt="" src="img/new_model.png"/></td>
    <td width="60"> **Ctrl+N** </td>
    <td>opens the @ref ui_new-dlg.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/open.png"/></td>
    <td> **Ctrl+O** </td>
    <td>opens the "Open Model File" dialog.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/reload.png"/></td>
    <td></td>
    <td>Reloads the model from disk. <span class="highlight">NOTE: A message box shows in case there are any edits to the model that could be lost</span></td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/save.png"/></td>
    <td> **Ctrl+S** </td>
    <td>saves the current model. <span class="highlight">Disabled if the model file is up to date</span>.</td>
  </tr>
</table>


@section ui_toolbar_edit Edit Toolbar
The Edit Toolbar provides quick access to actions of the @ref ui_menu_edit. The Edit Toolbar is visible when the checkbox in the <span class="checkbox">&nbsp;View-&gt;Edit Toolbar&nbsp;</span> menu is checked.

@image html tb_edit.png "Edit Toolbar"
<br>

<table summary="" cellpadding="2" cellspacing="0" >
  <tr >
    <td width="25"><img class="left" alt="" src="img/lock.png"/></td>
    <td width="60"></td>
    <td>locks the model to prevent any editing. You can still explore the model and generate code.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/unlock.png"/></td>
    <td></td>
    <td>unlocks the model to allow editing.</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/undo.png"/></td>
    <td> **Ctrl+Z** </td>
    <td>performs undo of the last model edit (see @ref bm_undo-redo)</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/redo.png"/></td>
    <td> **Ctrl+Y** </td>
    <td>performs redo of the last model edit (see @ref bm_undo-redo)</td>
  </tr>
  <tr  >
    <td><img class="left" alt="" src="img/cut.png"/></td>
    <td> **Ctrl+X** </td>
    <td>deletes the selected text or model item and places it in the Clipboard.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/copy.png"/></td>
    <td> **Ctrl+C** </td>
    <td>copies the selected text or model item into the Clipboard</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/copy_diagram.png"/></td>
    <td> </td>
    <td>copies the **selected elements** of the current diagram to the Clipboard in the Scalable Vector Graphics (SVG) format. If no elements are selected the whole diagram is saved in the Clipboard. <span class="highlight">Disabled if no diagram is currently active</span>.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/paste.png"/></td>
    <td> **Ctrl+V** </td>
    <td>pastes the content of the Clipboard to the current model editor (file, diagram, or property sheet). <span class="highlight">Disabled if clipboard has no data or the data is in a format incompatible with the current view.</span>.</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/paste_link.png"/></td>
    <td> **F5** </td>
    <td>selects a new @ref ui_curr_item based on the **model-reference** stored in the Clipboard (see also @ref ui_model_links).</td>
  </tr>
</table>


@section ui_toolbar_view View Toolbar
The View Toolbar provides quick access to actions of the @ref ui_menu_view. The View Toolbar is visible when the checkbox in the <span class="checkbox">&nbsp;View-&gt;View Toolbar&nbsp;</span> menu is checked.

@image html tb_view.png "View Toolbar"
<br>

<table summary="" cellpadding="2" cellspacing="0" >
  <tr>
    <td width="25"><img class="left" alt="" src="img/explorer.png"/></td>
    <td width="60"> **Ctrl-E** </td>
    <td>Toggles between show/hide the @ref ui_explorer</td>
  </tr>
  <tr >
    <td><img class="left" alt="" src="img/find.png"/></td>
    <td> **Ctrl-M** </td>
    <td>Toggles between show/hide the @ref ui_search</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/property.png"/></td>
    <td> **Ctrl-P** </td>
    <td>Toggles between show/hide the @ref ui_prop</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/birdseye_view.png"/></td>
    <td> **Ctrl-B** </td>
    <td>Toggles between show/hide the @ref ui_birds-eye</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/log.png"/></td>
    <td> **Ctrl-L** </td>
    <td>Toggles between show/hide the @ref ui_log</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/toolbox.png"/></td>
    <td> **Ctrl-T** </td>
    <td>Toggles between show/hide the @ref ui_toolbox</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/grid3.png"/></td>
    <td></td>
    <td>Drop down box with four choices of grid for diagrams. <span class="highlight">Disabled if no diagram is currently active</span>.</td>
  </tr>
</table>


@section ui_toolbar_tools Tools Toolbar
The Tools Toolbar provides quick access to actions of the @ref ui_menu_tools. The part of the Tools Toolbar with keyboard shortcuts <span class="button">F8</span>-<span class="button">F12</span> is customizable by means of the @ref ui_tools-dlg, so it might look different in your system. The Tools Toolbar is visible when the checkbox in the <span class="checkbox">&nbsp;View-&gt;Tools Toolbar&nbsp;</span> menu is checked.

@image html tb_tools.png "Tools Toolbar (Example)"
<br>

<table summary="" cellpadding="2" cellspacing="0" >
  <tr>
    <td width="25"><img class="left" alt="" src="img/license_gpl.png"/></td>
    <td width="60"></td>
    <td>launches the @ref ui_license-dlg.</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/codegen.png"/></td>
    <td> **F7** </td>
    <td>generates code for all @ref ce_file "file-templates" in the model (see also @ref ce)</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/tool0.png"/></td>
    <td> **F8** </td>
    <td>invokes an external tool #1 (see also @ref ui_tools-dlg)</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/tool1.png"/></td>
    <td> **F9** </td>
    <td>invokes an external tool #2 (see also @ref ui_tools-dlg)</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/tool2.png"/></td>
    <td> **F10** </td>
    <td>invokes an external tool #3 (see also @ref ui_tools-dlg)</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/tool3.png"/></td>
    <td> **F11** </td>
    <td>invokes an external tool #4 (see also @ref ui_tools-dlg)</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/tool4.png"/></td>
    <td> **F12** </td>
    <td>invokes an external tool #5 (see also @ref ui_tools-dlg)</td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/tool_kill.png"/></td>
    <td> **Esc** </td>
    <td>terminates the process that is running the current tool. <span class="highlight">NOTE: enabled only when an external tool is running</span>. </td>
  </tr>
  <tr>
    <td><img class="left" alt="" src="img/tool_manager.png"/></td>
    <td> </td>
    <td>launches the @ref ui_tools-dlg</td>
  </tr>
</table>

@nav{ui_menus,ui_status}
*/
/*##########################################################################*/
/*! @page ui_status Status Bar
@nav{ui_toolbars,ui_new-dlg}

<p>The Status Bar is a horizontal bar at the bottom of the QM&trade; main window for presenting status information. The Status Bar is visible when the checkbox in the <span class="checkbox">&nbsp;View-&gt;Status Bar&nbsp;</span> menu is checked.
</p>
<div style="clear:both;"></div>


@section ui_status_diagram Diagram Status Bar
The information displayed in the Status Bar depends on the type of the active MDI subwindow. If a **diagram window** is active, the Status Bar shows a hint, zoom slider and buttons, and the (X,Y) coordinates of the mouse cursor. The coordinates are measured in the **grid units** from the top-left corner of the diagram.

@image html status.jpg "Diagram Status Bar"


@section ui_status_file File Status Bar
If a **file window** is active, the Status Bar shows a hint and (Line, Column) coordinates of the caret within the text. Lines are counted from 1 at the top of the file. Columns are counted from 1 at the left edge of the text.

@image html status_file.jpg "File Status Bar"

@nav{ui_toolbars,ui_new-dlg}
*/
/*##########################################################################*/
/*! @page ui_new-dlg New Model Dialog Box
@nav{ui_status,ui_tools-dlg}

<p>The **New Model** dialog box allows you to create a new QM&trade; model. This dialog box can be opened either from the <span class="menu">File-&gt;New Model...</span> menu, or by means of the <span class="img new_model">New Model</span> button in the @ref ui_toolbar_file, or by means of the **Ctrl**-<span class="button">N</span> keyboard accelerator.
</p>

<div style="clear:both;"></div>

@image html new_model.png "New Model dialog"

The New Model dialog box has the following elements:

- The **Frameworks** list allows you to choose one of the three currently supported frameworks (`qpc`, `qpcpp`, or `qpn`) that provides you with base classes for derivation of your own classes, such as active objects, state machines, time events, etc. (**NOTE:** The QM&trade; Model is always based on one of the <a class="extern" target="_blank" href="https://www.state-machine.com/products">QP&trade; frameworks</a>);

- The @ref ui_custom_templates "Model Template" list allows you to choose a non-empty "template" as a starting point for your model. If you don't select the template and leave it at "None", your model will be empty, except for the selected framework.

@note
@ref ui_custom_templates "Model Templates" are just QM models, perhaps incomplete, that **you can create** as a starting point for your other models.

- The model **Name** allows you to type in the name of the @ref bm_model "model". This name is used to identify the model in the QM&trade; tool and for the @ref ui_model_file "Model File". <span class="highlight">NOTE: the model file name has the default extension `.qm`, which is added automatically</span>

- The model **Location** allows you to type in the **absolute path** of the model folder. Alternatively, you can click the <span class="img search_folder">button</span> to open the standard directory-open dialog box. (**NOTE:** the model directory also provides the reference point for the @ref ce "code generation". The QM&trade; code generator creates all directories and files **relative to the model file directory**.)

- The <span class="button">OK</span> button creates the specified model

- The <span class="button">Cancel</span> button closes the New Model dialog box without any action.


@note
The other way of creating a model in QM&trade; is to open an existing model (e.g., one of the @ref gs_exa "examples") and use the <span class="menu">File-&gt;Save As...</span> menu to save it under a different name in a directory of your choice.


@nav{ui_status,ui_tools-dlg}
*/
/*##########################################################################*/
/*! @page ui_tools-dlg Manage Tools Dialog Box
@nav{ui_new-dlg ,ui_license-dlg}

<p>The **Manage Tools** dialog box allows you to configure up to 5 different external tools that can then be launched directly from QM&trade; with the keyboard shortcuts <span class="button">F8</span> through <span class="button">F12</span>. Examples of external tools include `make` to perform a software build, `lint` to statically check your code, your own unit tests that run on the host computer, or a command-line tool to download the code to the embedded target, directly from QM with just one key press. The output generated by the external tool will appear in the QM's @ref ui_log.
</p>

@note
The external tools that can be launched directly from QM&trade; are not limited to command-line programs only. An external tool can be a GUI application and can be launched as "detached" from QM&trade;.


<div style="clear:both;"></div>


@section ui_tools-dlg_open Opening the Manage Tools dialog box
To open the **Manage Tools** dialog box, go to the <span class="menu">Tools-&gt;Manage External Tools...</span> menu or press the <span class="img tool_manager">Manage Tools</span> button in the @ref ui_toolbar_tools :

@image html manage_tools.png "Manage External Tools dialog"


@section ui_tools-dlg_env Setting Environment Variables
The **Environment Variables** list at the top of the "Manage External Tools" dialog box allows you to define any number of environment variables for the local process that runs an external tool. These environment variables can then be used inside the path names or as arguments to the launched programs. This is specifically helpful to avoid repetitions of information needed to define a tool or a group of related tools.

The environment variables defined at the top of the "Manage External Tools" dialog box are used in the tool configuration according to the syntax rules of the specific platform on which you run the tools. For example, environment variables on Windows are accessed by placing them between `%%` characters (e.g., `%``FOO%`). Environment variables on Linux are accessed by placing them in the parentheses following the dollar sign  (e.g., `$``(FOO)`).

@note
The environment variables defined at the top of the "Manage External Tools" dialog box have scope and lifetime limited to the temporary process that is used to lauch an external tool. They only persist during the run of the tool and disappear afterwards.


@section ui_tools-dlg_config Configuring an External Tool

- Click on the tool you want to configure in the **External Tools** list in the middle of the dialog box.

- Choose an icon for this tool from the **Icon** combo box. This icon will be displayed in the @ref ui_toolbar_tools and the @ref ui_menu_tools.

- In the **Title** box, enter the Title of this tool. The Title is used to identify the tool in the @ref ui_menu_tools and will also appear in the "balloon help" when you hover the mouse cursor over the tool button in the @ref ui_toolbar_tools.

- In the **Command** box, enter the file name for invoking the tool. You can either press the <span class="img search_computer">search</span> button to open the standard file-search dialog box or you can type in the file name manually. If the file resides on the system `PATH`, you can enter just the file name. If not, enter the full absolute path to the file. You can also use a **relative** path (starting with ".") with respect to the **model file** location.

- If the command needs arguments, you can specify them in the **Arguments** box. The <span class="img arrow_right"></span> button allows you to choose the pre-defined argument (currently the model file name or the model file path).

- Typically, you want your command to start in a specific working directory. For example, the `make` command needs to start in the directory where the `Makefile` is located. To specify the initial working directory, type it in manually in the **Initial Directory** box, or you can press the <span class="img search_folder"></span> button to open the standard folder-search dialog box. You can also specify the Initial Directory to be a **relative** path (starting with ".") with respect to the **model file** location.
<span class="highlight"> **NOTE:** The initial directory is not where the tool is located. The initial directory is the working directory in which the tool starts operating.</span>

- Check the **Generate code before launching** box if you want QM to generate the code before running your external tool.
@anchor ui_tools-dlg_errors
- Check the **Show error message box after failure** box if you want QM to alert you with a message box about the tool failure.

- Check the **Start as detached from QM** box only if you want the tool to operate independently from QM. This option makes sense only for tools with their own GUI. <span class="highlight"> **NOTE:** a tool launched as "detached" must be closed explicitly.</span>

- Press the <span class="button">Save</span> button to save the tool configuration.

@note
QM&trade; stores the External Tool configuration in the Settings for the QM&trade; application, which is the same storage that holds the most recently used models or the recent arrangement of the docking windows. These Settings are **not** part of the model, but rather are specific to the machine on which QM&trade; is installed.


@section ui_tools-dlg_gcc Example: A Tool for Calling GCC Compiler
As a simple example of using an external tool, consider a tool for building the Blinky project discussed in the @ref gs_tut_build "QM&trade; Tutorial".

The screen shot below shows how to set up the "build Blinky" tool:

@image html ui_tool_blinky-build.png "Setting up GCC build"

- **Title** property: `build Blinky`
- **Command** property: `gcc` (this assumes that `gcc` is on the `PATH`)
- **Arguments** property: `blinky.c -oblinky.exe -I%QPC%\include -I%QPC%\ports\win32 -L%QPC%\ports\win32\mingw\dbg -lqp`
- **Initial Directory** property: `.` (model directory)

@note
As shown in the screen shot above, in the __Arguments:__ property you can use the pre-defined symbols `${ModelPath}`, `${ModelFile}`, and `${ModelDir}`.


@section ui_tools-dlg_iar Example: A Tool for Building an IAR Project
Many mature embedded toolsets support building projects from the command-line, because only such builds can be truly **automated**. For example, the popular IAR Embedded Workbench toolset supports command-line build of the projects through the `IarBuild.exe` utility. The following screen shot illustrates how to set up an External Tool to build an IAR project.

@image html ui_tool_iar.png "Setting up IAR build"

The following screen shot shows the QM&trade; @ref ui_log "Log Console" output from building an IAR project.

@image html ui_tool_iar-log.png "Log of IAR build"

@note
In case of the tool failure, the @ref ui_log "Log Console" will show the error status. But, if you checked the **Show error message box after failure** box for the tool, you will get an additional alert in the form of a message box, which can be useful for unit testing.


@nav{ui_new-dlg ,ui_license-dlg}
*/
/*##########################################################################*/
/*! @page ui_license-dlg Code Generation License Dialog Box
@nav{ui_tools-dlg,ui_custom}

<p>As mentioned in the section @ref ab_special "What's Special about QM", much of the simplicity of QM&trade; derives from the fact that the models you create with QM&trade; are based on one of the <a class="extern" target="_blank" href="https://www.state-machine.com/qp">QP&trade; Real-Time Embedded Frameworks (RTEFs)</a>. An important implication of this design is that the @ref ce "code generated by QM" can only run within the QP&trade; RTEF, which means that such code must comply with the same licensing terms as the underlying QP framework (qpc, qpcpp, or qpn).
</p>

<div style="clear:both;"></div>

The structure of the **Code Generation License Dialog Box** reflects the <a class="extern" target="_blank" href="https://www.state-machine.com/products/#QP">dual-licensing</a> policy of the QP frameworks. The dialog box allows you to choose between the two QP licensing options: (1) the **open source** <a class="extern" target="_blank" href="https://www.state-machine.com/licensing">GNU General Public License (GPL)</a>, and (2) one of the traditional **closed source** <a class="extern" target="_blank" href="https://www.state-machine.com/licensing/#Commercial">commercial licenses</a>.

@attention
The choice of the licensing option made in the Code Generation License Dialog Box is reflected in the @ref ce_comment "top-level file comments" generated by QM (see also @ref ce).

@image html license_gpl-btn.png "Code Generation Toolbar with the license button"


@section ui_license-open Open Source Projects
The following screen shot shows the Code Generation License Dialog Box when the open-source GPL license is selected:

@image html license_gpl-dlg.png "Code Generation License Dialog (GPL License)"

- the <span class="button">Register Commercial QP License</span> button allows you to register a commercial license. This button opens the standard file-open dialog box through which you locate the Quantum Leaps @ref ui_license_cert "QM license certificate file" (file with extension `.qlc`), which is provided with your commercial license.

@section ui_license-closed Closed Source Projects
Commercial license is registered by means of a @ref ui_license_cert "QM license certificate file" that commercial Licensees receive with their license. The following screen shot shows the Code Generation License Dialog Box when a commercial QP license is selected:

@image html license_com-dlg.png "Code Generation License Dialog (Commercial License)"

- the <span class="button">Switch to GPL</span> button allows you to switch back to the GPL open source license
- the <span class="button">Change Commercial License</span> button allows you to register a different @ref ui_license_cert "QM license certificate file" (file with extension `.qlc`)
- the <span class="checkbox">License File Relative to the Model</span> checkbox specifies that the name of the license certificate should be saved inside the @ref ui_model_file "QM Model File", as a **relative** path to this model file. When the checkbox is not checked, the full absolute path to the license certificate is stored in the @ref ui_session_file "QM Session File".

@note
If you are a commercial licensee and for some reason you did not receive your QM License Certificate file, please send email with your license number to <a href="mailto:support@state-machine.com">support@state-machine.com</a> to request your copy.

@nav{ui_tools-dlg,ui_custom}
*/
/*##########################################################################*/
/*! @page ui_custom Customizing QM GUI
@nav{ui_tools-dlg,bm}

QM&trade; can be customized in several ways:

- You can change the entire look and feel of the application by selecting a new @ref ui_custom_style.

- You can fine-tune fonts and colors of individual elements by means of the @ref ui_custom_qss.

- Finally, you can create your own custom @ref ui_custom_templates to speed up creating new models.

<div style="clear:both;"></div>


@section ui_custom_style QM&trade; GUI Style
You can also customize QM&trade; by changing the overall **style** of the GUI by means of the <span class="menu">View-&gt;Style</span> sub-menu. The available styles are shown below.

@attention
The selected GUI style is loaded only during the startup, so you need to **restart QM&trade;** for the GUI style to take effect.


![QM&trade; GUI Styles](ui_view-styles.jpg)

The **View|Style**-menu allows you to achieve different effects, such as the "Default" (light) style and the "Dark" style shown below:

![Default Style with qm_light.qss StyleSheet (Windows)](qm-light.png)
<br>

![Dark Style with qm_dark.qss StyleSheet (Windows)](qm-dark.png)
<br>

![Dark Style with qm_dark.qss StyleSheet (Linux)](qm-dark-linux.png)


@section ui_custom_qss QM&trade; Style Sheets
The QM&trade; **Style Sheets**, located in the `Resources` sub-directory of the @ref gs_install_folder, provide the main way of customizing QM&trade;. The QM Style Sheets take advantage of the mechanism of <a class="extern" target="_blank" href="https://doc.qt.io/qt-5/stylesheet.html">Qt Style Sheets</a> inspired by HTML CSS (Cascading Style Sheets).

QM&trade; uses **two** Style Sheets:

- `qm_dark.qss` - used when the @ref ui_custom_style "Dark Style" is selected
- `qm_light.qss` - used in all other cases (when  @ref ui_custom_style "Dark Style" is NOT selected).

<br>
![QM&trade; style sheet files on disk](qm_qss.png)

@note
<img src="img/logo_win48.png" style="float:left; margin-right:10px;">
If QM&trade; is installed on Windows in such locations as "Program Files" or "Program Files (x86)", the `qm.qss` style sheet might not be editable or accessible to QM&trade; (because Windows treats these folders specially). In this case it is recommended to @ref gs_install_win "re-install QM" in a **different folder**, for example: `C:\qp\qm`.


@attention
The QM&trade; Style Sheet is loaded only during the startup, so you need to **restart QM&trade;** for the style sheet to take effect.


The QM Style Sheets `qm_xxx.qss` are plain text files that you can edit with any text editor. QM Style Sheets contain several commented **sections** described below:


@subsection ui_custom_mainwindow MainWindow Section

@code{.css}
/* MainWindow ................................................................
*/
MainWindow {
    /* window background for code, doc and diagram windows
    * (outside the editing area or canvas area)
    */
    qproperty-windowColor:       darkGray;

    /* background for code edit area */
    qproperty-codeBaseColor:     white;

    /* background for doc edit area */
    qproperty-docBaseColor:      #FFFFDD; /* light yellow */

    /* syntax highlighting styles */
    qproperty-comment: "green, #F7F7F7, italic";
    qproperty-keyword: "blue, transparent, bold";
    qproperty-preproc: "red,  transparent, bold";
    qproperty-string:  "darkBlue, transparent, italic";
    qproperty-string2: "blue, transparent, italic";
    qproperty-trail:   "transparent, lightGray";
    qproperty-stdint:  "blue, #EEEEEE";
    qproperty-me_ptr:  "red,  yellow";
    qproperty-evt_ptr: "blue, yellow";
    qproperty-qp_api:  "red, transparent, underline";
    qproperty-qm_dir:  "red, yellow, bold, underline";
}
@endcode
<br>

![MainWindow Styles](mainwindow_styles.jpg)


@subsection ui_custom_explorer ExplorerView Section
The `ExplorerView` section of the `qm_xxx.qss` Style Sheet pertains to @ref ui_explorer.

@code{.css}
/* ExplorerView ..............................................................
*/
ExplorerView {
    color:                       black;
    background-color:            white;
    alternate-background-color:  #E0E0E0;
}
ExplorerView:hover {
    background-color:            #FFFFDD;
    alternate-background-color:  #EEEEDD;
}
ExplorerView::item:selected {
    background-color:            darkRed;
}
@endcode
<br>

![ExplorerView Styles](explorer_styles.jpg)


@subsection ui_custom_search SearchView Section
The `SearchView` section pertains to all @ref ui_search.

@code{.css}
/* SearchView ................................................................
*/
SearchView {
    font-style:                  italic;
    color:                       blue;
    background-color:            lightBlue;
    alternate-background-color:  #EEEEFF;
}
SearchView:hover {
    background-color:            #DDDDFF;
    alternate-background-color:  #BBBBEE;
}
SearchView::item:selected {
    background-color:            darkBlue;
}
@endcode
<br>

![SearchView Styles](search_styles.jpg)



@subsection ui_custom_diagram DiagramView Section
The `DiagramView` section pertains to all @ref bm_diagram "Diagrams" and the @ref ui_birds-eye "Bird's Eye View".

@code
DiagramView {
    font-family:                 "Arial";
    font-size:                   8pt;

    qproperty-canvasColor:       white;
    qproperty-birdsEyeViewColor: #FFFF77;
    qproperty-nodePenColor:      darkBlue;
    qproperty-nodeBrushColor:    #E0E0FF;
    qproperty-connPenColor:      darkRed;
}
@endcode
<br>

@image html diagram_styles.jpg "Diagram Styles"
<br>

@image html birdseye_styles.jpg "Bird's Eye Styles"


@subsection ui_custom_code CodeEdit Section
The `CodeEdit` section pertains to all code editors in the QM user interface, which include @ref bm_edit "files" and action editors in the @ref ui_prop. The styles for the @ref bm_edit section come in two variants: when the Code window is active and when it is inactive.

@code
/* CodeEdit ..................................................................
* Used in the files and code entered via a Property Sheet.
*/
CodeEdit {
    font-family:                 "Consolas";
    font-size:                   8.75pt;

    color:                       black;
    selection-color:             white;
    selection-background-color:  darkBlue;
    /* NOTE: set the background with MainWindow::qproperty-codeBaseColor */
}
@endcode
<br>

@image html code_styles.jpg "Code Edit Styles (Code Edit Active)"
<br>

@image html code_styles2.jpg "Code Edit Styles (Code Edit Inactive)"


@subsection ui_custom_doc DocEdit Section
The `DocEdit` section pertains to all documentation editors in @ref ui_prop.

@code
/* DocEdit ...................................................................
* Used in the documentation entered via a Property Sheet.
*/
DocEdit {
    font-family:                 "Consolas";
    font-size:                   8.75pt;
    font-style:                  italic;

    color:                       darkBlue;
    /* NOTE: set the background with MainWindow::qproperty-docBaseColor */
}
@endcode
<br>
![DocEdit Styles](doc_styles.jpg)


@subsection ui_custom_log Log Section
The `Log` section pertains to the @ref ui_log. The styles for the log come in two variants: when the log window is active and when it is inactive.

@code
Log {
    font-family:                 "Lucida Console";
    font-size:                   8pt;
    selection-color:             darkRed;
    selection-background-color:  yellow;
}
Log:!active {
    selection-color:             white;
    selection-background-color:  darkGrey;
}
@endcode
<br>
@image html log_styles1.jpg "Log Styles (Log Window Active)"
<br>
@image html log_styles2.jpg "Log Styles (Log Window Inactive)"


@section ui_custom_templates Model Templates
QM&trade; model templates are simply QM&trade; models, perhaps incomplete, which are intended to be elaborated further into complete QM models. Simple model templates are provided in the @ref gs_install_folder in the subdirectory `Resources/`, but you can easily add <span class="strong">your own model templates</span>.


@subsection ui_custom_templates_use Using the Templates
Model templates are used through the @ref ui_new-dlg, where you can select a model template on which to base your newly created model.


@subsection ui_custom_templates_add Adding New Templates
You add a new model template simply by saving a model in the @ref gs_install_folder "QM Installation Folder" (&lt;qm&gt;) in the subdirectory `Resources/&lt;qp-framework-type&gt;`, where `<qp-framework-type>` stands for the framework type of the saved model. For example:

- A model template created with the <a class="extern" target="_blank" href="https://www.state-machine.com/qpc">QP/C framework</a> should go into the directory `&lt;qm&gt;/Resources/qpc`.

- A model template created with the <a class="extern" target="_blank" href="https://www.state-machine.com/qpcpp">QP/C++ framework</a> should go into the directory `&lt;qm&gt;/Resources/qpcpp`.

- A model template created with the <a class="extern" target="_blank" href="https://www.state-machine.com/qpn">QP-nano framework</a> should go into the directory `&lt;qm&gt;/Resources/qpn`.

@note
If you save a model template for the wrong QP framework type (e.g., you save a model based on `qpc` into `Resources/qpcpp/`), the template will be rejected during creation of the new model.

@nav{ui_tools-dlg,bm}
*/

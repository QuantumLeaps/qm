/*! @page cpt Key Concepts

@tableofcontents

<p>To use the QM&trade; tool effectively, you need to understand a few key concepts that underline the whole philosophy of modeling and code generation in QM&trade;. The following sections provide the basic definitions of the concepts and links where you can learn more.
</p>



@section cpt_oo Object Orientation
QM&trade; is fundamentally an **object-oriented tool**, regardless of the target programming language (currently C or C++). Object orientation means that @ref bm_model "QM models" are fundamentally composed of @ref bm_class "classes" and instances of classes (objects). Also, only classes can have @ref sm "State Machines" associated with them.

@note
If you program in C and object-oriented programming is new to you, please refer to the Application Note @webref{oop,Object-Oriented Programming}, which describes how you can implement the concepts of @ref bm_class "classes", **inheritance**, and **polymorphism** to portable ANSI-C.
@image html AN_OOP_in_C.png



@section cpt_ao Active Objects
QM&trade; assumes a specific overall **architecture** of your application, which combines object-orientation with the particular model of concurrency, known as "active objects" (a.k.a. "actors"). In this architecture, software application consists of collaborating active objects, which collectively deliver the desired behavior.

Active objects have their own threads of control (that's why they can "do" anything). They are also fundamentally <a href="https://www.state-machine.com/event-driven-programming" target="_blank" class="extern">event-driven</a>, meaning that they can communicate only by exchanging event instances.

You can learn more about the active object model of computation from the <a href="https://www.state-machine.com/active-object/" target="_blank" class="extern">Quantum Leaps website</a>. Here are only the annotated links to the most important characteristics of active objects:

- <a href="https://www.state-machine.com/active-object/#Encapsulation" target="_blank" class="extern">True Encapsulation for Concurrency</a>
- <a href="https://www.state-machine.com/active-object/#Asynchronous" target="_blank" class="extern">Asynchronous Communication</a>
- <a href="https://www.state-machine.com/active-object/#RTC" target="_blank" class="extern">Run-to-Completion Event Processing</a>
- <a href="https://www.state-machine.com/active-object/#Blocking" target="_blank" class="extern">No Blocking</a>



@subsection ab_framework Real-Time Embedded Frameworks
A Real-Time Embedded Framework (RTEF) combines the active object model of computation with real-time kernel(s), thus making active objects suitable for Real-Time Embedded (RTE) applications.



@section cpt_inversion Inversion of Control
The most important point to understand about a Real-Time Embedded Framework (RTEF) is how it differs from a toolkit, such as a traditional (Real-Time) Operating System (RTOS). When you use an (RT)OS, you write the main body of each thread and you call the code from the (RT)OS (such as a semaphore, time delay, etc.) In contrast, when you use a RTEF, you reuse the whole architecture and write the code that <em>it</em> calls. This leads to **inversion of control** compared to the traditional (RT)OS and is very characteristic to virtually all event-driven systems, such as Active Objects.



@subsubsection cpt_codegen Framework and Code Generation
By definition, the job of a RTEF is to provide well-defined "framework extension points" designed for customizing the framework into applications. This in turn provides well-defined rules for generating code and therefore most tools capable of automatic code generation are based on software frameworks.



@subsection cpt_qp QP&trade; Frameworks and QM&trade;
QM&trade; uses the QP
Much of the simplicity of QM&trade; derives from the fact that it limits itself to C or C++, and the QP&trade; RTEFs, as opposed to supporting an open-ended number of programming languages and yet-to-be-defined frameworks.

@next{ui} or@n
@next{bm}
*/

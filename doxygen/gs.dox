/*! @page gs Getting Started
@nav{index,gs_get}

The following sections describe how to get started with QM&trade; quickly:
- @subpage gs_get
- @subpage gs_run
- @subpage gs_tut
- @subpage gs_exa

@note
The features of this online help and tips for using it are described in Section @ref help.


[![Watch QM Tutorial video](qm_tut_video.jpg)](https://youtu.be/VJpTJaGPrVk)

@nav{index,gs_get}
*/
/*##########################################################################*/
/*!
@page gs_get Downloading &amp; Installing QM&trade;
@nav{gs,gs_run}

@section gs_bundle Downloading QM&trade; in QP&trade;-Bundle
The most recommended way of getting QM&trade; is by downloading the <a class="extern" target="_blank" href="https://www.state-machine.com/#Downloads"><b>QP-bundle&trade;</b></a>, which includes QM&trade; and also all <a class="extern" target="_blank" href="https://www.state-machine.com/products/qp/">QP&trade; Real-Time Embedded Frameworks</a> and the <a class="extern" target="_blank" href="https://www.state-machine.com/products/qtools/">QTools&trade; collection</a>. The main advantage of getting QM&trade; bundled together like that is that you get all components, tools and ready-to-use examples.

[![QP-bundle Downloads](qp-bundle.png)](https://www.state-machine.com/#Downloads)

@note
<a class="extern" target="_blank" href="https://www.state-machine.com/#Downloads"><strong>QP-bundle&trade;</strong></a> is the **most recommended** way of downloading and installing QM&trade;. However, if you are allergic to installers and GUIs or don't have administrator privileges you can also **download and install QM&trade; separately** as described below.


@section gs_gh Downloading QM&trade; from GitHub
Go to the <a class="extern" href="https://github.com/QuantumLeaps/qm/releases" target="_blank">QM&trade; <strong>release</strong> page on GitHub</a>, and choose the QM&trade; version number you wish to download. You should select the latest QM&trade; version, unless you have a very specific reason to go with an older release.

Inside the release directory (e.g., `5.1.3`), you need to choose the QM&trade; archive for your platform. QM&trade; is available for Windows (`qm_<ver>-win32.zip`), Linux (`qm_<ver>-linux64.zip`), and MacOS (`qm_<ver>-macx64.dmg`).

![QM downloads from GitHub](qm_gh.jpg)


@section gs_install Installing QM&trade;

@note
If you have any previous version of QM&trade; installed on your system, it is highly recommended to **uninstall it** before installing a newer version.


@section gs_install_win Installing QM&trade; on Windows
After downloading the ZIP archive for Windows (`qm_<ver>-win32.zip`), you can unzip the archive into any directory, although the `C:\qp\` folder is the recommended default.

@remarks
It is generally **not** recommended to install QM&trade; in such Windows locations as `"Program Files"` or `"Program Files (x86)"`, because these directories have access limitations and don't allow you to modify the @ref ui_custom_qss "QM Style Sheet" (`qm.qss`) or @ref ui_new-dlg "new model templates".


If you wish, after the installation, you could create a desktop shortcut and you can also associate QM&trade; model files (`*.qm` and `*.qmp`) with the QM application (using the standard Windows Explorer and "Open With" popup menu).

To uninstall QM&trade; you simply delete the installation directory.


@section gs_install_linux Installing QM&trade; on Linux
After downloading the ZIP archive for Linux (`qm_<ver>-linux64.zip`), you can unzip the archive into any directory, although the `~/qp/` folder is the recommended default.


@subsection gs_install_linux_icon Manual Setup of QM Desktop Shortcut
The easiest way to launch QM&trade; is through the desktop shortcut. However, on some Linux desktops the provided QM setup program might not be able to install correctly. In most of such cases, you might still be able to create the desktop shortcut manually. The provided procedure should work for both KDE and GNOME desktops:

1. Drag the file `<qm>\bin\qm.desktop` from the file explorer to the desktop:

![Dragging the QM shortcut to the desktop](setup_linux_shortcut.png)

2. Right-click on the desktop shortcut and choose "Icon Settings" (or sometimes Properties) from the popup menu. Set the application command to `<qm>\bin\qm.sh` script

![Setting qm.sh script as shortcut command](setup_linux_cmd.png)

3. If you wish to set the QM icon for the shortcut, click on the image and browse inside `<qm>\Resources\` folder:

![Changing the icon for the QM shortcut](setup_linux_icon.png)

@attention
To run the QM&trade; application on Linux, you need to run the `<qm>/bin/qm.sh` bash script instead of directly running the `<qm>/bin/qm` executable.


@section gs_install_mac Installing QM&trade; on MacOS

After downloading the `qm_<ver>-macx64.dmg` disk image, double click on the `.dmg` file. This will mount and open the disk image. To install the QM tool, you simply drag the `qm.app` image into the `Applications` folder (typically visible in the Dock). If you wish, you might also create the alias of the `qm.app` and place it on your Desktop.

![QM setup for Mac OS X](setup_mac.png)

To uninstall QM, simply delete the QM application from the Applications folder.


@section gs_install_folder QM&trade; Installation Folder
The setup program installs QM&trade; executable and all shared libraries necessary to run the application. The following example shows directories and files installed on Windows (where `&lt;qm&gt;` denotes the folder where you chose to install QM&trade;):

@code{c}
<qm>
  +-bin/             // executables
  | +-platforms/     // Platform plugin for Qt5
  | | +-qwindows.dll
  | |
  | +-qm.exe         // QM  application executable
  | + . . . .
  | +-Qt5Core.dll         // Qt5 Core features DLL
  | +-Qt5Gui.dll          // Qt5 GUI DLL
  | +-Qt5PrintSupport.dll // Qt5 Print DLL
  | +-Qt5Widgets.dll      // Qt5 Widgets DLL
  | + . . . .
  |
  +-html/            // HTML help
  | +-...
  | +-index.html     // HTML index file for all help topics
  |
  +-Resources/       // QM model templates
  | +-qpc/           // templates for QP/C
  | +-qpcpp/         // templates for QP/C++
  | +-qpn/           // templates for QP-nano
  | +-qm.qss         // QM style sheet (see Customizing QM)
  |
  +-QM_LICENSE.txt   // QM license
  +-README.md        // QM release notes
  +-unins000.exe     // QM uninstaller (if QM installed separately)
@endcode


@section gs_qp QP&trade; Frameworks
If your only intention is to use QM&trade; as a drawing tool, you don't need to bother with <a class="extern" target="_blank" href="https://www.state-machine.com/products/qp/">QP&trade;</a> or even know what it is. However, if you wish to use QM&trade; to its full potential for generating production-quality code, you need to install at least one of the QP&trade; frameworks (<a class="extern" target="_blank" href="https://www.state-machine.com/qpc/">QP/C</a>, <a class="extern" target="_blank" href="https://www.state-machine.com/qpcpp/">QP/C++</a>, or <a class="extern" target="_blank" href="https://www.state-machine.com/qpn/">QP-nano</a>). The open source QP&trade; frameworks are available for download inside the <a class="extern" target="_blank" href="https://www.state-machine.com/#Downloads"><b>QP-bundle&trade;</b></a>, which includes QM&trade; and also all <a class="extern" target="_blank" href="https://www.state-machine.com/products/qp/">QP&trade; Real-Time Embedded Frameworks</a> and the <a class="extern" target="_blank" href="https://www.state-machine.com/products/qtools/">QTools&trade; collection</a> or separately, as described in the Reference Manuals of each framework.

@nav{gs_get,gs_run}
*/
/*##########################################################################*/
/*! @page gs_run Launching QM&trade;
@nav{gs_get, gs_tut}

<p>The QM&trade; modeling tool can be used in two modes of operation: interactive GUI mode and command-line mode. This section begins with the description of the @ref gs_run_cmd-line "command-line parameters" and the @ref gs_console "console-mode", which is the same on all platforms supported by QM. Next, the section describes how to launch QM&trade; in the @ref gs_run_win "interactive GUI mode", which might vary, depending on the underlying operating system.
</p>


@section gs_run_cmd-line Command-Line Parameters
The QM&trade; executable takes the following optional command-line parameters:
- Console-Mode:
    + `-h` prints help to the console and exits
    + `-c [item]` generates code for the given model `[item]` and exits
    + `-d [item][.png|.emf]` generates a diagram from the given model `[item]` and exits
- GUI-Mode:
    + `-stylesheet <stylesheet-file>` overrides a stylesheet used by QM
    + `-style <style>` overrides the style used by QM

@note
The `-stylesheet <stylesheet-file>` option overrides the default QM style sheet `qm.qss` located in the @ref gs_install_folder.
The `-style <style>` option overrides the default QM style.


@section gs_console Console Mode

The QM&trade; application supports the __console mode__, in which it can **generate diagrams** and/or **generate code**. This console QM mode allows you to incorporate the code generation step into an **automated build process**, such as `Makefiles`, build scripts, or extra pre-compile steps in project files. The following output from the -h (help) option concisely summarizes the features of the console-mode:

@verbatim
C:\>qm -h
qm 4.6.0 (c) Quantum Leaps. https://www.state-machine.com/qm

Usage: qm [model-file] [-h][-c [item]] [-d [item][.png|.svg]]
or:    qm [-h][-c [item]] [-d [item][.png|.svg]] [--] <model-file>

Notes:
The argument [model-file] must be provided for options -c and -d
The options -d|-c [item] might be repeated multiple times
[item] is the fully-qualified model item name, e.g., ${foo::bar}

Examples:
qm xyz\my_model.qm -c (generate code for entire model "xyz\my_model.qm")
qm D:\xyz\my_model.qm -c (generate code for entire model "D:\xyz\my_model.qm")
qm -c ${pkgA} my_model.qm (generate code for item ${pkgA})
qm -c -- my_model.qm (generate code for entire model "my_model.qm")
qm my_model.qm -c ${pkgA} (generate code for item ${pkgA})
qm my_model.qm -c ${pkgA} -c${pkgB::.} (generate code for item ${pkgA} and ${pkgB::.})
qm my_model.qm -c ${.::main.c} (generate code for item ${.::main.c})
qm my_model.qm -d (generate all PNG diagrams in the model "my_model.qm")
qm my_model.qm -d *.png(generate all PNG diagrams in the model "my_model.qm")
qm my_model.qm -d *.svg (generate all SVG diagrams in the model "my_model.qm")
qm my_model.qm -d ${pkgA}.png (generate all PNG diagrams in the item ${pkgA})
@endverbatim

@attention
Even though the QM&trade; __console mode__ does not launch a GUI, it still requires GUI libraries installed on the host machine. This is necessary for supporting diagram generation. However, if you need to auto-generate code on a "headless" server machine, the QM&trade; distribution comes with the @ref ce_qmc , which has been specifically designed to run without any GUI libraries. For obvious reasons, __QMC__ supports only code generation and does __not__ support generating diagrams from the models.


@section gs_run_win Launching QM&trade; on Windows
The simplest way of running QM&trade; is by double-clicking on the desktop shortcut. In this case QM is launched without any command-line arguments. QM&trade; can be also launched by dragging a QM model file and dropping it on the QM shortcut, in which case QM is launched with the model file name as a command-line argument. Finally, QM can also be launched by double-clicking on the @ref bm_model "Model File" in the standard file explorer on your system, which launches QM&trade; and opens the model.

![QM shortcut](qm_shortcut.png)


@section gs_run_linux Launching QM&trade; on Linux

<span class="highlight">To run the QM&trade; application on Linux, you need to run the `<qm>/bin/qm.sh` bash script instead of the `<qm>/bin/qm` executable directly</span>. This is because the dynamic linker on Linux does **not** check the application directory for dynamic libraries by default, and it has to be expressly configured by setting the `LD_LIBRARY_PATH` environment variable, which is why you need the `<qm>/bin/qm.sh` script. Make sure that the script has executable permissions.

The most convenient way to launch QM&trade; on Linux is through a desktop shortcut (see also @ref gs_install_linux_icon ). The shortcut must be set to run the `<qm>/bin/qm.sh` script, as shown in the screen shot below.

![QM desktop shortcut configured to run qm.sh script command](setup_run_linux.png)

@note
QM&trade; can be also launched by dragging a QM model file and dropping it on the QM shortcut. In this case QM is launched with the model file name as a command-line argument.


@subsection gs_run_linux_file Setting File Association for QM Models

If you associate QM model files (`.qm`) with the QM application, you can conveniently launch QM by double-clicking on a chosen model file in the file explorer, and choose the "Open With..." option from the popup menu. The screen shot below shows how to achieve it in Linux:

![Associating model files with QM](setup_linux_file.png)


@section gs_run_mac Launching QM&trade; on MacOS

On macOS, you can put the QM shortcut into the Dock, as shown in the screen shot below. You can also create a QM application alias on the desktop.

![QM running on MacOS](setup_run_mac.png)

@note
QM&trade; can be also launched by dragging a QM model file and dropping it on the QM shortcut. In this case QM is launched with the model file name as a command-line argument.

@nav{gs_get,gs_tut}
*/
/*##########################################################################*/
/*! @page gs_tut QM&trade; Tutorial
@nav{gs_run,gs_exa}

<p>This tutorial describes how to use QM&trade; to model and implement a simple "Blinky" application, which can blink an LED on an embedded board or just print the state changes of the LED to the screen when executed on the desktop.
</p>

@note
This tutorial assumes [QP/C Framework](https://www.state-machine.com/qpc) (version **6**). To work with other QP framework types ([QP/C++](https://www.state-machine.com/qpcpp) or [QP-nano](https://www.state-machine.com/qpn)) it is recommended to create your Blinky model from a **model template** for the specific framework type, as @ref gs_tut_template "described below".


@section gs_tut_video QM Tutorial Video
If you prefer to watch the [<b>video version of this tutorial</b>](https://youtu.be/VJpTJaGPrVk), it is available on the [Quantum Leaps YouTube Channel](https://www.youtube.com/c/StateMachineCOM):

[![Watch QM Tutorial video](qm_tut_video.jpg)](https://youtu.be/VJpTJaGPrVk)


@section gs_tut_new Creating A New Model from Scratch
To create a new model, go to <span class="menu">File-&gt;New Model...</span> menu or press the <span class="img new_model">New Model</span> button in the @ref ui_toolbar_edit. This will open the following @ref ui_new-dlg :

![New Model dialog](new_model.png)

- Select the **QP framework type** you want to base the new model on (the "Framework" panel). The choices are: `qpc` for QP/C&trade;, `qpcpp` for QP/C++&trade;, and `qpn` for QP-nano&trade;. For this tutorial, leave the default **qpc** framework type.

- Choose the **model template** for your model ("the Model Template" panel). , select the template and leave it at "None", your model will be empty, except the selected framework. For this tutorial, leave the default template **None**, so that you can start building your model from scratch.

- Name your model (the "Name" field). <span class="highlight">NOTE: the `.qm` extension will be added automatically.</span> For this tutorial, rename the model to `blinky`.

- Choose the directory for your model file (the "Location" field). You can either type in the path manually, or you can press the <span class="img search_folder">&nbsp;</span> button to open the directory-search dialog box. For this tutorial, choose the model location to `<your-directory>\blinky`, where `<your-directory>` is a directory of your choice. <span class="highlight">NOTE: the model directory also provides the reference point for code generation. All generated directories and files are relative to the model file directory.</span>

- Press the <span class="button">OK</span> button.

- If you wish to build the model from scratch, skip the next section and proceed to @ref gs_tut_add.


@section gs_tut_template Creating Blinky Model from Template
Alternatively, you can create the Blinky model from the provided Template. As shown in the screen shot below, you select the `blinky.qm` Template in the New Model dialog:

![The Blinky template in New Model dialog](new_blinky.png)

When you close the dialog with the <span class="button">OK</span> button in this case, the blinky model will be copied from the provided template and will be ready. You can inspect the model, show the Blinky @ref gs_tut_draw "state diagram", @ref gs_tut_ce-gen "generate code from it", @ref gs_tut_build "build the application" and run it on your desktop PC.

@attention
The blinky model templates are available for all QP framework types (QP/C, QP/C++ and QP-nano), not just for QP/C. These model templates are a bit more advanced than the model you will create from scratch in the rest of this Tutorial. The models created from these templates are annotated with comments and documentation and it is **highly recommended** that you get familiar with the structure of these models.


@section gs_tut_add Adding Model Items
Now you can start adding items to the new model.


@subsection gs_tut_add-package Add a Package
The first item you add is a @ref bm_package "Package". A package in UML is a grouping construct that allows you to combine other model items into a higher-level unit&mdash;the package. The most common use of a package is to group together @ref bm_class "classes", but a package can hold also @ref bm_attr "free attributes", @ref bm_oper-free "free operations", and even other @ref bm_package "packages".

- In the @ref ui_explorer view <strong>right</strong>-click on the <span class="img model">blinky</span> model item to get a popup-menu specific to that item. Once the popup menu opens, select <span class="menu">Add Package</span>.

![Add Package](add_package.png)

- In the @ref ui_prop change the package name to `AOs` (Active Objects) and the stereotype to `components`.

![Package Properties](blinky_package.png)


@subsection gs_tut_add-class Add a Class
Next you need to add a @ref bm_class "class" to the new package, because only classes can have behavior (i.e., @ref sm "State Machines").

- In the @ref ui_explorer view **right**-click on the <span class="img package_comp">AOs</span> package and select <span class="menu">Add Class</span> from the popup menu.

![Add Class](add_class.png)

- In the @ref ui_prop change the class name to `Blinky` and the superclass to <span class="highlight">`qpc::QActive`</span>.

![Setting Superclass](blinky_class.png)

@note
In QM&trade; a State Machine can only be associated with a @ref bm_class "class" that inherits one of the @ref sm_class "QP state machine classes". The choice of the state machine superclass determines the @ref ce_sm_strategy "state machine implementation strategy".


@subsection gs_tut_add-timer Add a Time Event
Next, you need to add a **Time Event** attribute that will deliver the periodic stimulus to trigger blinking in your `Blinky` state machine.

- In the @ref ui_explorer **right**-click on the <span class="img class_active">Blinky</span> class and select <span class="menu">Add Attribute</span> from the popup menu.

![Adding Attribute](blinky_a1.png)

- In the @ref ui_prop change the attribute name to `timeEvt`, the type to `qpc::QTimeEvt`, and visibility to `private`.

![Attribute Properties](blinky_a2.png)


@subsection gs_tut_add-sm Add State Machine
- In the @ref ui_explorer **right**-click on the <span class="img class_active">Blinky</span> class and select <span class="menu">Add State Machine</span> from the popup menu.

![Adding State Machine](blinky_sm_add.png)


@section gs_tut_draw Drawing State Machine Diagram
- In the @ref ui_explorer **right**-click on the <span class="img statechart">SM</span> (State Machine) item and select <span class="menu">Show Diagram</span> from the popup menu. Alternatively you can just **double**-click on the <span class="img statechart">SM</span> item to execute its **default action**, which is to show the diagram.

![Show State Machine Diagram](blinky_sm_show.png)


@subsection gs_tut_draw-state Add States
- In the @ref ui_toolbox click on the <span class="img state">state</span> tool. Move your mouse (all mouse buttons released) to the diagram window where you want to position the upper-left corner of the state shape. Notice the new shape of the mouse cursor (shown on the right). Click the mouse and drag it (with mouse button depressed) to the location of the lower-right corner of the state shape. Release the mouse.

![Adding the off State](blinky_state_add.gif)

- In the @ref ui_prop change the state name to `off` and add the entry action to this state `BSP_ledOff();`.

- In a similar way as before add a second state. In the @ref ui_prop change the state name to `on` and add the entry action to this state `BSP_ledOn();`.


@subsection gs_tut_draw-initial Add Initial Transition
- In the @ref ui_toolbox click on the <span class="img initial"></span> initial transition tool. Move your mouse (all mouse buttons released) to the diagram window where you want to position the beginning of the initial transition shape. Notice the new shape of the mouse cursor (shown on the right). Click the mouse and drag it (with mouse button depressed) to the edge of the state. Notice the cursor change when you reach the edge. Release the mouse.

![Adding the Initial Transition](blinky_init_add.gif)


- In the @ref ui_prop add action code to this initial transition `QTimeEvt_armX(&me->timeEvt, BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);`

@note The action code of the initial transition arms the time event to expire in `BSP_TICKS_PER_SEC/2` number of clock ticks (i.e., in 1/2 of a second) and also **every** `BSP_TICKS_PER_SEC/2` number of clock ticks (i.e., every 1/2 of a second).


@subsection gs_tut_draw-tran Add Transitions
- In the @ref ui_toolbox click on the <span class="img tran"></span> transition tool. Move your mouse (all mouse buttons released) to the state edge where you want to position the beginning of the transition connector. Notice the new shape of the mouse cursor (<span class="img cur_tran1"></span>). Click the mouse and drag it (with mouse button depressed) to the edge of the state. Notice the cursor change when you reach the edge. Release the mouse.

![Adding a Transition](blinky_tran_add.gif)

- In the @ref ui_prop change the trigger of this transition to `TIMEOUT`.

- In a similar way as before add a second transition and change its trigger also to `TIMEOUT`.

![Complete State Machine](blinky_sm.png)


@section gs_tut_ce Generating Code
Compared to most other graphical tools based on state machines, QM&trade; turns the code generation "upside down". QM&trade; lets **you** determine the generated code structure, directory names, file names, and elements that go into every file (see @ref ce_phys). You can mix your own code with the generated code and use QM to generate as much or as little of the overall code as you see fit .


@subsection gs_tut_ce-dir Add Directory
First, you need to create a @ref ce_dir "directory", which will determine the location of the files generated on disk **relative** to the @ref ui_model_file.

![Adding a Directory](blinky_dir_add.gif)

- In the @ref ui_explorer **right**-click on the <span class="img model">blinky</span> model item and select <span class="menu">Add Directory</span> in the popup menu. This will be the @ref ce_dir "directory" where your code will be generated. The **path** of the directory **relative** to the @ref ui_model_file can be edited in the Property Editor. Type `.` (dot) for the name of the directory. The dot means the same directory as the @ref ui_model_file, meaning that your code will be generated in the same directory as your model.


@subsection gs_tut_ce-file Add File
Once you have a directory, you can add @ref ce_file "Files" to it. In a real-life project you would typically split the code into header (`.h`) files, place each active object in its own source (`.c`) file, and use separate `.c` files for the Board Support Package (BSP) and `main()`. But for the sake of simplicity, this tutorial will put the whole implementation in just one file: `blinky.c`, which you create as follows:

![Adding a File](blinky_file_add.gif)

- In the @ref ui_explorer view **right**-click on the <span class="img directory">.</span> directory item and select <span class="menu">Add File</span> in the popup menu. After the file is created, you can edit its name in the Property Editor. Type `blinky.c` in the name box and press Enter. Note that the file icon changes to <span class="img file_source_c">&nbsp;</span>.


@subsection gs_tut_ce-code Edit File
In QM&trade; **you** provide the body of every @ref ce_file "file-template", in which you can type your own code as well as @ref ce_directive.

- In the @ref ui_explorer **double**-click on the <span class="img file_c">blinky.c</span> file to open the file in a window. Next copy the following code to the Clipboard and paste it into the file window.

@include "blinky.c"

@attention
The listing above shows the two most important code generation directives: @ref ce_declare "$declare${AOs::Blinky}" for generating the @ref ce_directive-decl of the `Blinky` class, and @ref ce_define "$define${AOs::Blinky}" for generating the @ref ce_directive-def of the of the `Blinky` class.


@n
![Opening blinky.c File and Pasting the Code](blinky_file_edit.gif)


@subsection gs_tut_ce-gen Generate Code
- Generate code by pressing the <span class="img codegen">Generate Code</span> button in the Tools toolbar.

![Code Generation](blinky_code_gen.gif)

At this point QM&trade; has generated the `blinky.c` file in the same directory as the `blinky.qm` @ref ui_model_file. You can inspect the generated `blinky.c` file on the disk with your favorite code editor.


@section gs_tut_build Building the Project
You build the generated code just as any other hand-crafted code. This simplistic tutorial generated the whole project in just one source file `blinky.c`.

@attention
The following sections show how to build the Blinky project from the command-prompt. However, it is also possible to build the project @ref ui_tools-dlg_gcc "directly from QM", by defining an external tool in the @ref ui_tools-dlg "Manage Tools Dialog Box".


@subsection gs_tut_win Building Blinky on Windows
The Board Support Package (BSP) functions coded at the beginning of the `blinky.c` file are designed to run on the desktop OS, such as Windows or Linux, because of the `printf()` statements. Here is how to build the `blinky.exe` executable in a Windows command prompt:

![Blinky on Windows](blinky_win.gif)

First, you set the environment variable `QPC` to point to the location of the QP/C framework on your machine. Here, `QCP=C:\qp\qpc`, which is the default location, but if you installed QP/C in a *different* location you need to set `QPC` to the actual location on your machine.

@verbatim
set QPC=C:\qp\qpc
@endverbatim

Next, you invoke the free `gcc` compiler to build your `blinky.c` file. Here, the MinGW `gcc` is taken from the QTools collection installed in the default `C:\qp\qtools\bin`.

@verbatim
gcc blinky.c -oblinky.exe -I%QPC%\include -I%QPC%\ports\win32 -L%QPC%\ports\win32\dbg -lqp
@endverbatim

@note
On Windows, the free `gcc` compiler is typically not installed, so you need to download and install it. The <a class="extern" target="_blank" href="https://github.com/QuantumLeaps/qtools/releases">QTools collection for Windows</a> contains the MinGW `gcc` compiler and other Unix-style utilities.


Finally, you run the produced `blinky.exe` file, which starts printing to your screen.

@verbatim
blinky
@endverbatim

You exit the application by pressing <span class="button">Ctrl+C</span>.


@subsection gs_tut_linux Building Blinky on Linux (POSIX)
Building and running Blinky on the POSIX platforms (such as Linux and MacOS) is a little bit more involved, because the QP framework is built from sources as opposed to being linked as a pre-built library. The recommended procedure is to create the Blinky model from the @ref gs_tut_template "existing template", which also generates the `Makefile` for building the application. The following screen shot shows how to build and run the Blinky project on Linux:

![Blinky on Linux](blinky_linux.gif)


@subsection gs_tut_emb Building Blinky for an Embedded Board
To build the Blinky project for an embedded board, you need to modify the BSP (Board Support Package) to turn the LED on and off. You also need to use the specific cross-compiler. Please refer to the <a class="extern" target="_blank" href="https://youtu.be/O7ER6_VqIH0">"Getting Started" video</a> for more information about getting started with the QP frameworks. Also, you might read "Getting Started" Application Notes: <a class="extern" target="_blank" href="https://www.state-machine.com/doc/AN_Getting_Started_with_QPC.pdf">QP/C</a>, <a class="extern" target="_blank" href="https://www.state-machine.com/doc/AN_Getting_Started_with_QPCpp.pdf">QP/C++</a>, and <a class="extern" target="_blank" href="https://www.state-machine.com/doc/AN_Getting_Started_with_QP-nano.pdf">QP-nano</a>.

![Blinky on TivaC LaunchPad](blinky_ek-tm4c123gxl.gif)

@nav{gs_run,gs_exa}
*/
/*##########################################################################*/
/*! @page gs_exa QM&trade; Examples
@nav{gs_tut, ui}

<p>QM&trade; model examples and projects for ARM Cortex-M, POSIX (Linux, Embedded Linux), and Windows (including <a class="extern" target="_blank" href="https://www.state-machine.com/doc/AN_QWIN-GUI.pdf">QWIN GUI Kit for Prototyping Embedded Systems on Windows
</a>) are included in the <strong>QP&trade; Baseline Distributions</strong> available for download from <a class="extern" target="_blank" href="https://sourceforge.net/projects/qpc/files">SourceForge.net</a>.
</p>

Specifically:
- the <a class="extern" target="_blank" href="https://sourceforge.net/projects/qpc/files/QP-C">QP/C&trade; Baseline Distribution</a> contains the QM models and projects for the <a class="extern" target="_blank" href="https://www.state-machine.com/qpc/">QP/C framework</a>;

- the <a class="extern" target="_blank" href="https://sourceforge.net/projects/qpc/files/QP-Cpp">QP/C++&trade; Baseline Distribution</a> contains the QM models and projects for the <a class="extern" target="_blank" href="https://www.state-machine.com/qpcpp/">QP/C++ framework</a>; and

- the <a class="extern" target="_blank" href="https://sourceforge.net/projects/qpc/files/QP-nano">QP-nano&trade; Baseline Distribution</a> contains the QM models and projects for the <a class="extern" target="_blank" href="https://www.state-machine.com/qpn/">QP-nano framework</a>.

<div style="clear:both;"></div>


@section gs_examples_finding Finding the QM&trade; Examples in the QP&trade; Distribution
The following directory chart shows QM&trade; example models and projects in the QP/C Baseline Distribution. The QP/C++ and QP-nano Baseline Distributions have a similar structure.

@note
The QM model files have the <b>extension .qm</b>. After installing QM, you can open the models in QM by double-clicking on the `.qm` files in Windows Explorer.


@code{c}
qpc/   // QP/C installation folder (QP/C++ and QP-nano are similar)
+-examples/         // all examples
| +-workstation/    // examples for host workstations (Windows, Linux, macOS)
| | +-blinky/       // Blinky example
| | | +-blinky.qm   // QM model  <<<<<<
| | | +-...         //
| | +-calc/         // Calculator example (as published in PSiCC2 book)
| | | +-calc.qm     // QM model  <<<<<<
| | | +-...         //
| | +-calc1/        // improved Calculator example
| | | +-calc1.qm    // QM model  <<<<<<
| | | +-...         //
| | +-calc1_sub/    // improved Calculator with sub-machines example
| | | +-calc1_sub.qm  // QM model  <<<<<<
| | | +-...         //
| | +-comp/         // "Orthogonal Component" example
| | | +-comp.qm     // QM model  <<<<<<
| | | +-...         //
| | +-dpp/          // Dining Philosophers Problem (DPP) example
| | | +-dpp.qm      // QM model  <<<<<<
| | | +-...         //
| | +-dpp-comp/     // DPP with "Orthogonal Component" example
| | | +-dpp.qm      // QM model  <<<<<<
| | | +-...         //
| | +-dpp-gui/      // Dining Philosophers Problem (DPP) with GUI =====++
| | |               //                                                 ||
| | +-game-gui/     // "Fly 'n' Shoot" game example with GUI =====++   ||
| | |               //                                            ||   ||
| | +-history_qhsm/ // Transition to history with QHsm example    ||   ||
| | | +-history.qm  // QM model  <<<<<<                           ||   ||
| | | +-...         //                                            ||   ||
| | +-history_qmsm/ // Transition to history with QMsm example    ||   ||
| | | +-history.qm  // QM model  <<<<<<                           ||   ||
| | | +-...         //                                            ||   ||
| | +-...           //                                            ||   ||
| | +-qhsmtst/      // QHsmTst example (from the PSiCC2 book)     ||   ||
| | | +-qhsmtst.qm  // QM model  <<<<<<                           ||   ||
| | | +-...         //                                            ||   ||
| | +-qmsmtst/      // QMsmTst example                            ||   ||
| | | +-qmsmtst.qm  // QM model  <<<<<<                           ||   ||
| | | +-...         //                                            ||   ||
| |                 //                                            ||   ||
| +-arm-cm/         // examples for ARM Cortex-M                  ||   ||
| | +-blinky_ek-tm4c123gxl/ // Blinky example for EK-TM4C123GXL   ||   ||
| | | +-qk/         // examples for the preemptive QK kernel      ||   ||
| | | | +-arm/      // ARM-Keil toolset                           ||   ||
| | | | | +-dbg/    // debug build directory                      ||   ||
| | | | | | +-blinky-qk.axf // Blinky image for debugging         ||   ||
| | | | | | +-blinky-qk.bin // Blinky image for flash download    ||   ||
| | | | | +-...     //                                            ||   ||
| | | | | +-blinky-qk.uvprojx // Keil uVision project             ||   ||
| | | | | +...      //                                            ||   ||
| | | | +-gnu/      // GNU-ARM toolset                            ||   ||
| | | | | +-dbg/    // debug build directory                      ||   ||
| | | | | | +-blinky-qk.elf // Blinky image for debugging         ||   ||
| | | | | | +-blinky-qk.bin // Blinky image for flash download    ||   ||
| | | | | +-...     //                                            ||   ||
| | | | | +-Makefile  // makefile to build the project            ||   ||
| | | | | +...      //                                            ||   ||
| | | | +-iar/      // IAR EWARM toolset                          ||   ||
| | | | | +-dbg/    // debug build directory                      ||   ||
| | | | | | +-blinky-qk.bin // Blinky image for flash download    ||   ||
| | | | | +-...     //                                            ||   ||
| | | | | +-blinky-qk.ewp // IAR EW project                       ||   ||
| | | | | +-blinky-qk.eww // IAR EW workspace                     ||   ||
| | | | | +-...     //                                            ||   ||
| | | +-qv/         // examples for the cooperative QV kernel     ||   ||
| | | | +-arm/      // ARM-Keil toolset                           ||   ||
| | | | | +-dbg/    // debug build directory                      ||   ||
| | | | | | +-blinky-qv.axf // Blinky image for debugging         ||   ||
| | | | | | +-blinky-qv.bin // Blinky image for flash download    ||   ||
| | | | | +-...     //                                            ||   ||
| | | | | +-blinky-qv.uvprojx // Keil uVision project             ||   ||
| | | | | +...      //                                            ||   ||
| | | | +-gnu/      // GNU-ARM toolset                            ||   ||
| | | | | +-dbg/    // debug build directory                      ||   ||
| | | | | | +-blinky-qv.elf // Blinky image for debugging         ||   ||
| | | | | | +-blinky-qv.bin // Blinky image for flash download    ||   ||
| | | | | +-...     //                                            ||   ||
| | | | | +-Makefile  // makefile to build the project            ||   ||
| | | | | +...      //                                            ||   ||
| | | | +-iar/      // IAR EWARM toolset                          ||   ||
| | | | | +-dbg/    // debug build directory                      ||   ||
| | | | | | +-blinky-qv.bin // Blinky image for flash download    ||   ||
| | | | | +-...     //                                            ||   ||
| | | | | +-blinky-qv.ewp // IAR EW project                       ||   ||
| | | | | +-blinky-qv.eww // IAR EW workspace                     ||   ||
| | | | | +-...     //                                            ||   ||
| | | +-win32/      // examples for Windows                       ||   ||
| | | | +-dbg/      // debug build directory (MinGW)              ||   ||
| | | |   +-blinky.exe // Blinky executable                       ||   ||
| | | | +-Debug/    // debug build directory (Visual C++)         ||   ||
| | | | | +-blinky.exe // Blinky executable                       ||   ||
| | | | +-...       //                                            ||   ||
| | | | +-Makefile  // makefile to build the project (MinGW)      ||   ||
| | | | +-dpp_gui.sln // Visual Studio solution file              ||   ||
| | | | +-dpp_gui.vcxproj // Visual Studio project file           ||   ||
| | | | +-...       //                                            ||   ||
| | | +-win32-qv/   // examples for Windows (single-threaded)     ||   ||
| | | | +-...       //                                            ||   ||
| | | | |           //                                            ||   ||
| | +-dpp-qk_ek-tm4c123gxl/ // DPP example for EK-TM4C123GXL      ||   ||
| | | +-qk/         // examples for the preemptive QK kernel      ||   ||
| | | | +-arm/      // ARM-Keil toolset                           ||   ||
| | | | | +-...     //                                            ||   ||
| | | | | +-dpp-qk.uvprojx // Keil uVision project                ||   ||
| | | | | +...      //                                            ||   ||
| | | | +-gnu/      // examples for GNU-ARM                       ||   ||
| | | | | +-...     //                                            ||   ||
| | | | | +-Makefile // makefile to build the project             ||   ||
| | | | | +...      //                                            ||   ||
| | | | +-iar/      // examples for the IAR EWARM                 ||   ||
| | | | | +-dpp-qk.ewp // IAR EW project                          ||   ||
| | | | | +-dpp-qk.eww // IAR EW workspace                        ||   ||
| | | | | +-...     //                                            ||   ||
| | | +-qv/         // examples for the cooperative QV kernel     ||   ||
| | | | +-arm/      // ARM-Keil toolset                           ||   ||
| | | | | +-...     //                                            ||   ||
| | | | | +-dpp-qv.uvprojx // Keil uVision project                ||   ||
| | | | | +...      //                                            ||   ||
| | | | +-gnu/      // examples for GNU-ARM                       ||   ||
| | | | | +-...     //                                            ||   ||
| | | | | +-Makefile // makefile to build the project             ||   ||
| | | | | +...      //                                            ||   ||
| | | | +-iar/      // examples for the IAR EWARM                 ||   ||
| | | | | +-dpp-qv.ewp // IAR EW project                          ||   ||
| | | | | +-dpp-qv.eww // IAR EW workspace                        ||   ||
| | | | | +-...     //                                            ||   ||
| | | +-win32-gui/  // examples for Windows with GUI (QWin)  <=====|===++
| | | | +-dbg/      // debug build directory (MinGW)              ||
| | | |   +-dpp.exe // DPP executable                             ||
| | | | +-Debug/    // debug build directory (Visual C++)         ||
| | | | | +-dpp.exe // DPP executable                             ||
| | | | +-...       //                                            ||
| | | | +-Makefile  // makefile to build the project (MinGW)      ||
| | | | +-dpp_gui.sln // Visual Studio solution file              ||
| | | | +-dpp_gui.vcxproj // Visual Studio project file           ||
| | | | +-...       //                                            ||
| | | +-dpp.qm      // QM model of DPP <<<<<<                     ||
| | | +-...         //                                            ||
| | +-game_efm32-slstk3401a/ // game for EFM32-SLSTK3401A         ||
| | | +-qk/         // examples for the preemptive QK kernel      ||
| | | | +-arm/      // ARM-Keil toolset                           ||
| | | | +-gnu/      // examples for GNU-ARM                       ||
| | | | +-iar/      // examples for IAR EWARM                     ||
| | | +-qv/         // examples for the cooperative QV kernel     ||
| | | | +-arm/      // ARM-Keil toolset                           ||
| | | | +-gnu/      // examples for GNU-ARM                       ||
| | | | +-iar/      // examples for IAR EWARM                     ||
| | | +-win32-gui/  // examples for Windows with GUI (QWin) <=====++
| | | | +-...       //
| | | +-game.qm     // QM model of the game  <<<<<<
@endcode


@section gs_examples_models Example Models
Most QP&trade; example application contain the QM&trade; models (`.qm`) that you can open in the QM&trade; tool to explore, and modify. For example, the following screen shot shows the model <span class="highlight">game.qm</span> opened in QM.


@subsection dpp Dining Philosophers Problem (DPP) Example
The Dining Philosophers Problem (DPP) application is used in most QP&trade; examples for various processors and operating systems. This example application is described in the <a class="extern" target="_blank" href="https://www.state-machine.com/doc/AN_DPP.pdf">Application Note "Dining Philosophers Problem (DPP) Example"</a>.

![Dining Philosophers Problem (DPP) model](ex_dpp.jpg)


@subsection game "Fly 'n' Shoot" Game Example
The "Fly 'n' Shoot" game example demonstrates several state machines (active objects) executing concurrently to realize a simple game. This example application is described in <a class="extern" target="_blank" href="https://www.state-machine.com/doc/PSiCC2.pdf">Chapter 1 of the "Practical UML Statecharts in C/C++, 2nd Ed." book</a>, which is available online in the book excerpts.

![Fly 'n' Shoot game model](ex_game.jpg)


@section gs_examples_run Running the Examples
All provided QM&trade; examples contain pre-built executables/images that you can immediately execute (on Windows/Linux) or download to the target board (EK-TM4C123GXL or EK-LM3S811 boards).


@subsection gs_examples_win Windows
The examples for <strong>Windows</strong> come in two flavors: simple console applications and GUI simulations of an embedded board. Both types can be run by double-clicking on the executable (e.g., `dpp.exe` or `game-gui.exe`). You interact with the console applications by typing on your keyboard, where the legend of the recognized keys is displayed at the beginning of the run. The GUI simulations respond to mouse clicks and keyboard as described in the <a class="extern" target="_blank" href="https://www.state-machine.com/an/">App Notes</a> for the example applications.

![DPP-GUI example on Windows](dpp_win-gui.gif)
@n
![Game simulation on Windows](game_win-gui.gif)


@subsection gs_examples_lin Linux
The examples for <strong>Linux</strong> are provided as simple console applications. You run them from the terminal window, typing the name of the program. You interact with the console applications by typing on your keyboard, where the legend of the recognized keys is displayed at the beginning of the run.

![DPP example in a Linux terminal](ex_dpp_linux.jpg)


@subsection arm_cm EK-TM4C123GXL and EK-LM3S811 (ARM Cortex-M)
The examples for the <strong>EK-TM4C123GXL</strong> and <strong>EK-LM3S811</strong> boards are provided for the ARM-KEIL MDK, GNU-ARM (Sourcery CodeBench), and IAR EWARM toolsets. Free evaluation versions of all these toolsets are available for download from the respective websites. Pre-compiled images for flash download are provided in all example projects.

![DPP on EK-TM4C123GXL](EK-TM4C123GXL.jpg)
@n
![Game on EK-LM3S811](EK-LM3S811.jpg)


@section gs_examples_rebuild Rebuilding the Examples
In order to rebuild the examples from source code you need to:

- Install the <a class="extern" target="_blank" href="https://sourceforge.net/projects/qpc/files">baseline code of the QP framework</a> type you want to use.

- Install the ARM development toolset you want to use (ARM-KEL, GNU-ARM, or IAR).

- Define an environment variable to point to the location of the QP baseline code (`QPC` for QP/C, `QPCPP` for QP/C++, and `QPN` for QP-nano).

For example, if you want to rebuild a QP/C example project, you need to download and install the <a class="extern" target="_blank" href="https://sourceforge.net/projects/qpc/files/QP-C/">QP/C baseline code</a> and you need to define the environment variable `QPC`. Assuming that you have installed QP/C into the directory `C:\qp\qpc`, you should define the environment variable `QPC` to `C:\qp\qpc`.

@nav{gs_tut, ui}
*/


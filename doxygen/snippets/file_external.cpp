//.$file${.::test::test.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: calc_sub.qm
// File:  ${.::test::test.cpp}
//
// This code has been generated by QM 5.0.1 <www.state-machine.com/qm/>.
// DO NOT EDIT SECTIONS BETWEEN THE COMMENTS "$...vvv".."$end...^^^".
// All your changes in these sections will be lost.
//
// This code is covered by the following QP license:
// License #   : QPCPP-EVAL
// Issued to   : Institution or an individual evaluating the QP/C++ framework
// Framework(s): qpcpp
// Support ends: 2019-12-31
// Product(s)  :
// This license is available only for evaluation purposes and
// the generated code is still licensed under the terms of GPL.
// Please submit request for extension of the evaluaion period at:
// https://www.state-machine.com/licensing/#RequestForm
//
//.$endhead${.::test::test.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.h" // QP/C++
#include "bsp.h"   // board support package
#include "calc.h"  // application
. . .
$declare${SMs::Calc}

static Calc l_calc;    // the only instance of the Calc class

// global-scope definitions --------------------------------------
QP::QMsm * const the_calc = &l_calc;    // "opaque" pointer to MSM
. . .

//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 640U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.4.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${SMs::Calc} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//.${SMs::Calc} ..............................................................
//.${SMs::Calc::Calc} ........................................................
Calc::Calc()
  : QMsm(Q_STATE_CAST(&Calc::initial))
{}

//.${SMs::Calc::SM} ..........................................................
QP::QState Calc::initial(Calc * const me, QP::QEvt const * const e) {
    . . .
    return QM_TRAN_INIT(&tatbl_);
}
//.${SMs::Calc::SM::on} ......................................................
QP::QMState const Calc::on_s = {
    static_cast<QP::QMState const *>(0), // superstate (top)
    Q_STATE_CAST(&Calc::on),
    Q_ACTION_CAST(&Calc::on_e),
    Q_ACTION_CAST(&Calc::on_x),
    Q_ACTION_CAST(&Calc::on_i)
};
. . .
//.$enddef${SMs::Calc} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
